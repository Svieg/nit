# This file is part of NIT ( http://www.nitlanguage.org ).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Parser generated by nitcc for the grammar nitcc
module nitcc_parser is generated, no_warning("missing-doc","old-init")
import nitcc_nodes
class Parser_nitcc
	super Parser
	redef fun start_state do return state_0
end
private fun state_0: LRState0 do return once new LRState0
private fun state_1: LRState1 do return once new LRState1
private fun state_2: LRState2 do return once new LRState2
private fun state_3: LRState3 do return once new LRState3
private fun state_4: LRState4 do return once new LRState4
private fun state_5: LRState5 do return once new LRState5
private fun state_6: LRState6 do return once new LRState6
private fun state_7: LRState7 do return once new LRState7
private fun state_8: LRState8 do return once new LRState8
private fun state_9: LRState9 do return once new LRState9
private fun state_10: LRState10 do return once new LRState10
private fun state_11: LRState11 do return once new LRState11
private fun state_12: LRState12 do return once new LRState12
private fun state_13: LRState13 do return once new LRState13
private fun state_14: LRState14 do return once new LRState14
private fun state_15: LRState15 do return once new LRState15
private fun state_16: LRState16 do return once new LRState16
private fun state_17: LRState17 do return once new LRState17
private fun state_18: LRState18 do return once new LRState18
private fun state_19: LRState19 do return once new LRState19
private fun state_20: LRState20 do return once new LRState20
private fun state_21: LRState21 do return once new LRState21
private fun state_22: LRState22 do return once new LRState22
private fun state_23: LRState23 do return once new LRState23
private fun state_24: LRState24 do return once new LRState24
private fun state_25: LRState25 do return once new LRState25
private fun state_26: LRState26 do return once new LRState26
private fun state_27: LRState27 do return once new LRState27
private fun state_28: LRState28 do return once new LRState28
private fun state_29: LRState29 do return once new LRState29
private fun state_30: LRState30 do return once new LRState30
private fun state_31: LRState31 do return once new LRState31
private fun state_32: LRState32 do return once new LRState32
private fun state_33: LRState33 do return once new LRState33
private fun state_34: LRState34 do return once new LRState34
private fun state_35: LRState35 do return once new LRState35
private fun state_36: LRState36 do return once new LRState36
private fun state_37: LRState37 do return once new LRState37
private fun state_38: LRState38 do return once new LRState38
private fun state_39: LRState39 do return once new LRState39
private fun state_40: LRState40 do return once new LRState40
private fun state_41: LRState41 do return once new LRState41
private fun state_42: LRState42 do return once new LRState42
private fun state_43: LRState43 do return once new LRState43
private fun state_44: LRState44 do return once new LRState44
private fun state_45: LRState45 do return once new LRState45
private fun state_46: LRState46 do return once new LRState46
private fun state_47: LRState47 do return once new LRState47
private fun state_48: LRState48 do return once new LRState48
private fun state_49: LRState49 do return once new LRState49
private fun state_50: LRState50 do return once new LRState50
private fun state_51: LRState51 do return once new LRState51
private fun state_52: LRState52 do return once new LRState52
private fun state_53: LRState53 do return once new LRState53
private fun state_54: LRState54 do return once new LRState54
private fun state_55: LRState55 do return once new LRState55
private fun state_56: LRState56 do return once new LRState56
private fun state_57: LRState57 do return once new LRState57
private fun state_58: LRState58 do return once new LRState58
private fun state_59: LRState59 do return once new LRState59
private fun state_60: LRState60 do return once new LRState60
private fun state_61: LRState61 do return once new LRState61
private fun state_62: LRState62 do return once new LRState62
private fun state_63: LRState63 do return once new LRState63
private fun state_64: LRState64 do return once new LRState64
private fun state_65: LRState65 do return once new LRState65
private fun state_66: LRState66 do return once new LRState66
private fun state_67: LRState67 do return once new LRState67
private fun state_68: LRState68 do return once new LRState68
private fun state_69: LRState69 do return once new LRState69
private fun state_70: LRState70 do return once new LRState70
private fun state_71: LRState71 do return once new LRState71
private fun state_72: LRState72 do return once new LRState72
private fun state_73: LRState73 do return once new LRState73
private fun state_74: LRState74 do return once new LRState74
private fun state_75: LRState75 do return once new LRState75
private fun state_76: LRState76 do return once new LRState76
private fun state_77: LRState77 do return once new LRState77
private fun state_78: LRState78 do return once new LRState78
private fun state_79: LRState79 do return once new LRState79
private fun state_80: LRState80 do return once new LRState80
private fun state_81: LRState81 do return once new LRState81
private fun state_82: LRState82 do return once new LRState82
private fun state_83: LRState83 do return once new LRState83
private fun state_84: LRState84 do return once new LRState84
private fun state_85: LRState85 do return once new LRState85
private fun state_86: LRState86 do return once new LRState86
private fun state_87: LRState87 do return once new LRState87
private fun state_88: LRState88 do return once new LRState88
private fun state_89: LRState89 do return once new LRState89
private fun state_90: LRState90 do return once new LRState90
private fun state_91: LRState91 do return once new LRState91
private fun state_92: LRState92 do return once new LRState92
private fun state_93: LRState93 do return once new LRState93
private fun state_94: LRState94 do return once new LRState94
private fun state_95: LRState95 do return once new LRState95
private fun state_96: LRState96 do return once new LRState96
private fun state_97: LRState97 do return once new LRState97
private fun state_98: LRState98 do return once new LRState98
private fun state_99: LRState99 do return once new LRState99
private fun state_100: LRState100 do return once new LRState100
private fun state_101: LRState101 do return once new LRState101
private fun state_102: LRState102 do return once new LRState102
private fun state_103: LRState103 do return once new LRState103
private fun state_104: LRState104 do return once new LRState104
private fun state_105: LRState105 do return once new LRState105
private fun state_106: LRState106 do return once new LRState106
private fun state_107: LRState107 do return once new LRState107
private fun state_108: LRState108 do return once new LRState108
private fun state_109: LRState109 do return once new LRState109
private fun state_110: LRState110 do return once new LRState110
private fun state_111: LRState111 do return once new LRState111
private fun state_112: LRState112 do return once new LRState112
private fun state_113: LRState113 do return once new LRState113
private fun state_114: LRState114 do return once new LRState114
private fun state_115: LRState115 do return once new LRState115
private fun state_116: LRState116 do return once new LRState116
private fun state_117: LRState117 do return once new LRState117
private fun state_118: LRState118 do return once new LRState118
private fun state_119: LRState119 do return once new LRState119
private fun state_120: LRState120 do return once new LRState120
private fun state_121: LRState121 do return once new LRState121
private fun state_122: LRState122 do return once new LRState122
private fun state_123: LRState123 do return once new LRState123
private fun state_124: LRState124 do return once new LRState124
private fun state_125: LRState125 do return once new LRState125
private fun state_126: LRState126 do return once new LRState126
private fun state_127: LRState127 do return once new LRState127
private fun state_128: LRState128 do return once new LRState128
private fun state_129: LRState129 do return once new LRState129
private fun state_130: LRState130 do return once new LRState130
private fun state_131: LRState131 do return once new LRState131
private fun state_132: LRState132 do return once new LRState132
private fun state_133: LRState133 do return once new LRState133
private fun state_134: LRState134 do return once new LRState134
private fun state_135: LRState135 do return once new LRState135
private fun state_136: LRState136 do return once new LRState136
private fun state_137: LRState137 do return once new LRState137
private fun state_138: LRState138 do return once new LRState138
private fun state_139: LRState139 do return once new LRState139
private fun state_140: LRState140 do return once new LRState140
private fun state_141: LRState141 do return once new LRState141
private fun state_142: LRState142 do return once new LRState142
private fun state_143: LRState143 do return once new LRState143
private fun state_144: LRState144 do return once new LRState144
private fun state_145: LRState145 do return once new LRState145
private fun state_146: LRState146 do return once new LRState146
private fun goto_Ngrammar: Goto_Ngrammar do return once new Goto_Ngrammar
private fun reduce_Ngrammar_95d0(parser: Parser) do
		# REDUCE grammar::grammar_0='Grammar' id ';' lexer_part parser_part tree_part
		var n5 = parser.pop.as(Ntree_part)
		var n4 = parser.pop.as(Nparser_part)
		var n3 = parser.pop.as(Nlexer_part)
		var n2 = parser.pop.as(N_39d_59d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39dGrammar_39d)
		var p1 = new Ngrammar(n0, n1, n2, n3, n4, n5)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ngrammar)
end
private fun reduce_Ngrammar_95d1(parser: Parser) do
		# REDUCE grammar::grammar_1='Grammar' id ';' parser_part tree_part
		var n4 = parser.pop.as(Ntree_part)
		var n3 = parser.pop.as(Nparser_part)
		var n2 = parser.pop.as(N_39d_59d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39dGrammar_39d)
		var p1 = new Ngrammar(n0, n1, n2, null, n3, n4)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ngrammar)
end
private fun reduce_Ngrammar_95d2(parser: Parser) do
		# REDUCE grammar::grammar_2='Grammar' id ';' lexer_part tree_part
		var n4 = parser.pop.as(Ntree_part)
		var n3 = parser.pop.as(Nlexer_part)
		var n2 = parser.pop.as(N_39d_59d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39dGrammar_39d)
		var p1 = new Ngrammar(n0, n1, n2, n3, null, n4)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ngrammar)
end
private fun reduce_Ngrammar_95d3(parser: Parser) do
		# REDUCE grammar::grammar_3='Grammar' id ';' tree_part
		var n3 = parser.pop.as(Ntree_part)
		var n2 = parser.pop.as(N_39d_59d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39dGrammar_39d)
		var p1 = new Ngrammar(n0, n1, n2, null, null, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ngrammar)
end
private fun reduce_Ngrammar_95d4(parser: Parser) do
		# REDUCE grammar::grammar_4='Grammar' id ';' lexer_part parser_part
		var n4 = parser.pop.as(Nparser_part)
		var n3 = parser.pop.as(Nlexer_part)
		var n2 = parser.pop.as(N_39d_59d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39dGrammar_39d)
		var p1 = new Ngrammar(n0, n1, n2, n3, n4, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ngrammar)
end
private fun reduce_Ngrammar_95d5(parser: Parser) do
		# REDUCE grammar::grammar_5='Grammar' id ';' parser_part
		var n3 = parser.pop.as(Nparser_part)
		var n2 = parser.pop.as(N_39d_59d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39dGrammar_39d)
		var p1 = new Ngrammar(n0, n1, n2, null, n3, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ngrammar)
end
private fun reduce_Ngrammar_95d6(parser: Parser) do
		# REDUCE grammar::grammar_6='Grammar' id ';' lexer_part
		var n3 = parser.pop.as(Nlexer_part)
		var n2 = parser.pop.as(N_39d_59d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39dGrammar_39d)
		var p1 = new Ngrammar(n0, n1, n2, n3, null, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ngrammar)
end
private fun reduce_Ngrammar_95d7(parser: Parser) do
		# REDUCE grammar::grammar_7='Grammar' id ';'
		var n2 = parser.pop.as(N_39d_59d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39dGrammar_39d)
		var p1 = new Ngrammar(n0, n1, n2, null, null, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ngrammar)
end
private fun goto_Nlexer_part: Goto_Nlexer_part do return once new Goto_Nlexer_part
private fun reduce_Nlexer_part_95d0(parser: Parser) do
		# REDUCE lexer_part::lexer_part_0='Lexer' expr+
		var n1 = parser.pop.as(Nodes[Nexpr])
		var n0 = parser.pop.as(N_39dLexer_39d)
		var p1 = new Nlexer_part(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nlexer_part)
end
private fun reduce_Nlexer_part_95d1(parser: Parser) do
		# REDUCE lexer_part::lexer_part_1='Lexer'
		var n0 = parser.pop.as(N_39dLexer_39d)
		var p1 = new Nlexer_part(n0, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nlexer_part)
end
private fun goto_Nexpr: Goto_Nexpr do return once new Goto_Nexpr
private fun reduce_Nexpr(parser: Parser) do
		# REDUCE expr::expr=id '=' re ';'
		var n3 = parser.pop.as(N_39d_59d_39d)
		var n2 = parser.pop.as(Nre)
		var n1 = parser.pop.as(N_39d_61d_39d)
		var n0 = parser.pop.as(Nid)
		var p1 = new Nexpr(n0, n1, n2, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nexpr)
end
private fun goto_Nre: Goto_Nre do return once new Goto_Nre
private fun reduce_Nre_alter(parser: Parser) do
		# REDUCE re::re_alter=re '|' re1
		var n2 = parser.pop.as(Nre)
		var n1 = parser.pop.as(N_39d_124d_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_alter(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre)
end
private fun reduce_Nre_95d1(parser: Parser) do
		# REDUCE re::re_1=re1
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_95d1(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre)
end
private fun goto_Nre1: Goto_Nre1 do return once new Goto_Nre1
private fun reduce_Nre_minus(parser: Parser) do
		# REDUCE re1::re_minus=re1 '-' re2
		var n2 = parser.pop.as(Nre)
		var n1 = parser.pop.as(N_39d_45d_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_minus(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre1)
end
private fun reduce_Nre_except(parser: Parser) do
		# REDUCE re1::re_except=re1 'Except' re2
		var n2 = parser.pop.as(Nre)
		var n1 = parser.pop.as(N_39dExcept_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_except(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre1)
end
private fun reduce_Nre_and(parser: Parser) do
		# REDUCE re1::re_and=re1 'And' re2
		var n2 = parser.pop.as(Nre)
		var n1 = parser.pop.as(N_39dAnd_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_and(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre1)
end
private fun reduce_Nre1_95d3(parser: Parser) do
		# REDUCE re1::re1_3=re2
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre1_95d3(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre1)
end
private fun goto_Nre2: Goto_Nre2 do return once new Goto_Nre2
private fun reduce_Nre_conc(parser: Parser) do
		# REDUCE re2::re_conc=re2 re3
		var n1 = parser.pop.as(Nre)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_conc(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre2)
end
private fun reduce_Nre2_95d1(parser: Parser) do
		# REDUCE re2::re2_1=re3
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre2_95d1(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre2)
end
private fun goto_Nre3: Goto_Nre3 do return once new Goto_Nre3
private fun reduce_Nre_ques(parser: Parser) do
		# REDUCE re3::re_ques=re3 '?'
		var n1 = parser.pop.as(N_39d_63d_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_ques(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_star(parser: Parser) do
		# REDUCE re3::re_star=re3 '*'
		var n1 = parser.pop.as(N_39d_42d_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_star(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_plus(parser: Parser) do
		# REDUCE re3::re_plus=re3 '+'
		var n1 = parser.pop.as(N_39d_43d_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_plus(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_shortest(parser: Parser) do
		# REDUCE re3::re_shortest='Shortest' '(' re ')'
		var n3 = parser.pop.as(N_39d_41d_39d)
		var n2 = parser.pop.as(Nre)
		var n1 = parser.pop.as(N_39d_40d_39d)
		var n0 = parser.pop.as(N_39dShortest_39d)
		var p1 = new Nre_shortest(n0, n1, n2, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_longest(parser: Parser) do
		# REDUCE re3::re_longest='Longest' '(' re ')'
		var n3 = parser.pop.as(N_39d_41d_39d)
		var n2 = parser.pop.as(Nre)
		var n1 = parser.pop.as(N_39d_40d_39d)
		var n0 = parser.pop.as(N_39dLongest_39d)
		var p1 = new Nre_longest(n0, n1, n2, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_prefixes(parser: Parser) do
		# REDUCE re3::re_prefixes='Prefixes' '(' re ')'
		var n3 = parser.pop.as(N_39d_41d_39d)
		var n2 = parser.pop.as(Nre)
		var n1 = parser.pop.as(N_39d_40d_39d)
		var n0 = parser.pop.as(N_39dPrefixes_39d)
		var p1 = new Nre_prefixes(n0, n1, n2, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_id(parser: Parser) do
		# REDUCE re3::re_id=id
		var n0 = parser.pop.as(Nid)
		var p1 = new Nre_id(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_par(parser: Parser) do
		# REDUCE re3::re_par='(' re ')'
		var n2 = parser.pop.as(N_39d_41d_39d)
		var n1 = parser.pop.as(Nre)
		var n0 = parser.pop.as(N_39d_40d_39d)
		var p1 = new Nre_par(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_class(parser: Parser) do
		# REDUCE re3::re_class=text '.' '.' text
		var n3 = parser.pop.as(Nre)
		var n2 = parser.pop.as(N_39d_46d_39d)
		var n1 = parser.pop.as(N_39d_46d_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_class(n0, n1, n2, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_openclass(parser: Parser) do
		# REDUCE re3::re_openclass=text '.' '.' '.'
		var n3 = parser.pop.as(N_39d_46d_39d)
		var n2 = parser.pop.as(N_39d_46d_39d)
		var n1 = parser.pop.as(N_39d_46d_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_openclass(n0, n1, n2, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_any(parser: Parser) do
		# REDUCE re3::re_any='Any'
		var n0 = parser.pop.as(N_39dAny_39d)
		var p1 = new Nre_any(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_end(parser: Parser) do
		# REDUCE re3::re_end='End'
		var n0 = parser.pop.as(N_39dEnd_39d)
		var p1 = new Nre_end(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun reduce_Nre_text(parser: Parser) do
		# REDUCE re3::re_text=text
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_text(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre3)
end
private fun goto_Ntext: Goto_Ntext do return once new Goto_Ntext
private fun reduce_Nre_str(parser: Parser) do
		# REDUCE text::re_str=str
		var n0 = parser.pop.as(Nstr)
		var p1 = new Nre_str(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ntext)
end
private fun reduce_Nre_ch_dec(parser: Parser) do
		# REDUCE text::re_ch_dec=ch_dec
		var n0 = parser.pop.as(Nch_dec)
		var p1 = new Nre_ch_dec(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ntext)
end
private fun reduce_Nre_ch_hex(parser: Parser) do
		# REDUCE text::re_ch_hex=ch_hex
		var n0 = parser.pop.as(Nch_hex)
		var p1 = new Nre_ch_hex(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ntext)
end
private fun goto_Nparser_part: Goto_Nparser_part do return once new Goto_Nparser_part
private fun reduce_Nparser_part_95d0(parser: Parser) do
		# REDUCE parser_part::parser_part_0='Parser' ign rej prod+
		var n3 = parser.pop.as(Nodes[Nprod])
		var n2 = parser.pop.as(Nrej)
		var n1 = parser.pop.as(Nign)
		var n0 = parser.pop.as(N_39dParser_39d)
		var p1 = new Nparser_part(n0, n1, n2, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nparser_part)
end
private fun reduce_Nparser_part_95d1(parser: Parser) do
		# REDUCE parser_part::parser_part_1='Parser' rej prod+
		var n2 = parser.pop.as(Nodes[Nprod])
		var n1 = parser.pop.as(Nrej)
		var n0 = parser.pop.as(N_39dParser_39d)
		var p1 = new Nparser_part(n0, null, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nparser_part)
end
private fun reduce_Nparser_part_95d2(parser: Parser) do
		# REDUCE parser_part::parser_part_2='Parser' ign prod+
		var n2 = parser.pop.as(Nodes[Nprod])
		var n1 = parser.pop.as(Nign)
		var n0 = parser.pop.as(N_39dParser_39d)
		var p1 = new Nparser_part(n0, n1, null, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nparser_part)
end
private fun reduce_Nparser_part_95d3(parser: Parser) do
		# REDUCE parser_part::parser_part_3='Parser' prod+
		var n1 = parser.pop.as(Nodes[Nprod])
		var n0 = parser.pop.as(N_39dParser_39d)
		var p1 = new Nparser_part(n0, null, null, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nparser_part)
end
private fun reduce_Nparser_part_95d4(parser: Parser) do
		# REDUCE parser_part::parser_part_4='Parser' ign rej
		var n2 = parser.pop.as(Nrej)
		var n1 = parser.pop.as(Nign)
		var n0 = parser.pop.as(N_39dParser_39d)
		var p1 = new Nparser_part(n0, n1, n2, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nparser_part)
end
private fun reduce_Nparser_part_95d5(parser: Parser) do
		# REDUCE parser_part::parser_part_5='Parser' rej
		var n1 = parser.pop.as(Nrej)
		var n0 = parser.pop.as(N_39dParser_39d)
		var p1 = new Nparser_part(n0, null, n1, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nparser_part)
end
private fun reduce_Nparser_part_95d6(parser: Parser) do
		# REDUCE parser_part::parser_part_6='Parser' ign
		var n1 = parser.pop.as(Nign)
		var n0 = parser.pop.as(N_39dParser_39d)
		var p1 = new Nparser_part(n0, n1, null, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nparser_part)
end
private fun reduce_Nparser_part_95d7(parser: Parser) do
		# REDUCE parser_part::parser_part_7='Parser'
		var n0 = parser.pop.as(N_39dParser_39d)
		var p1 = new Nparser_part(n0, null, null, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nparser_part)
end
private fun goto_Nign: Goto_Nign do return once new Goto_Nign
private fun reduce_Nign(parser: Parser) do
		# REDUCE ign::ign='Ignored' elem_list ';'
		var n2 = parser.pop.as(N_39d_59d_39d)
		var n1 = parser.pop.as(Nelem_list)
		var n0 = parser.pop.as(N_39dIgnored_39d)
		var p1 = new Nign(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nign)
end
private fun goto_Nrej: Goto_Nrej do return once new Goto_Nrej
private fun reduce_Nrej(parser: Parser) do
		# REDUCE rej::rej='Rejected' elem_list ';'
		var n2 = parser.pop.as(N_39d_59d_39d)
		var n1 = parser.pop.as(Nelem_list)
		var n0 = parser.pop.as(N_39dRejected_39d)
		var p1 = new Nrej(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nrej)
end
private fun goto_Nprod: Goto_Nprod do return once new Goto_Nprod
private fun reduce_Nprod_95d0(parser: Parser) do
		# REDUCE prod::prod_0=id ptrans '=' alts priority+ ';'
		var n5 = parser.pop.as(N_39d_59d_39d)
		var n4 = parser.pop.as(Nodes[Npriority])
		var n3 = parser.pop.as(Nalts)
		var n2 = parser.pop.as(N_39d_61d_39d)
		var n1 = parser.pop.as(Nptrans)
		var n0 = parser.pop.as(Nid)
		var p1 = new Nprod(n0, n1, n2, n3, n4, n5)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nprod)
end
private fun reduce_Nprod_95d1(parser: Parser) do
		# REDUCE prod::prod_1=id '=' alts priority+ ';'
		var n4 = parser.pop.as(N_39d_59d_39d)
		var n3 = parser.pop.as(Nodes[Npriority])
		var n2 = parser.pop.as(Nalts)
		var n1 = parser.pop.as(N_39d_61d_39d)
		var n0 = parser.pop.as(Nid)
		var p1 = new Nprod(n0, null, n1, n2, n3, n4)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nprod)
end
private fun reduce_Nprod_95d2(parser: Parser) do
		# REDUCE prod::prod_2=id ptrans '=' alts ';'
		var n4 = parser.pop.as(N_39d_59d_39d)
		var n3 = parser.pop.as(Nalts)
		var n2 = parser.pop.as(N_39d_61d_39d)
		var n1 = parser.pop.as(Nptrans)
		var n0 = parser.pop.as(Nid)
		var p1 = new Nprod(n0, n1, n2, n3, null, n4)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nprod)
end
private fun reduce_Nprod_95d3(parser: Parser) do
		# REDUCE prod::prod_3=id '=' alts ';'
		var n3 = parser.pop.as(N_39d_59d_39d)
		var n2 = parser.pop.as(Nalts)
		var n1 = parser.pop.as(N_39d_61d_39d)
		var n0 = parser.pop.as(Nid)
		var p1 = new Nprod(n0, null, n1, n2, null, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nprod)
end
private fun goto_Nptrans: Goto_Nptrans do return once new Goto_Nptrans
private fun reduce_Nptrans(parser: Parser) do
		# REDUCE ptrans::ptrans='{' '->' id '}'
		var n3 = parser.pop.as(N_39d_125d_39d)
		var n2 = parser.pop.as(Nid)
		var n1 = parser.pop.as(N_39d_45d_62d_39d)
		var n0 = parser.pop.as(N_39d_123d_39d)
		var p1 = new Nptrans(n0, n1, n2, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nptrans)
end
private fun goto_Natrans: Goto_Natrans do return once new Goto_Natrans
private fun reduce_Natrans(parser: Parser) do
		# REDUCE atrans::atrans='{' '->' '}'
		var n2 = parser.pop.as(N_39d_125d_39d)
		var n1 = parser.pop.as(N_39d_45d_62d_39d)
		var n0 = parser.pop.as(N_39d_123d_39d)
		var p1 = new Natrans(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Natrans)
end
private fun goto_Nalts: Goto_Nalts do return once new Goto_Nalts
private fun reduce_Nalts_more(parser: Parser) do
		# REDUCE alts::alts_more=alts '|' alt
		var n2 = parser.pop.as(Nalt)
		var n1 = parser.pop.as(N_39d_124d_39d)
		var n0 = parser.pop.as(Nalts)
		var p1 = new Nalts_more(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nalts)
end
private fun reduce_Nalts_one(parser: Parser) do
		# REDUCE alts::alts_one=alt
		var n0 = parser.pop.as(Nalt)
		var p1 = new Nalts_one(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nalts)
end
private fun goto_Nalt: Goto_Nalt do return once new Goto_Nalt
private fun reduce_Nalt_95d0(parser: Parser) do
		# REDUCE alt::alt_0=altid nelem+ atrans
		var n2 = parser.pop.as(Natrans)
		var n1 = parser.pop.as(Nodes[Nnelem])
		var n0 = parser.pop.as(Naltid)
		var p1 = new Nalt(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nalt)
end
private fun reduce_Nalt_95d1(parser: Parser) do
		# REDUCE alt::alt_1=nelem+ atrans
		var n1 = parser.pop.as(Natrans)
		var n0 = parser.pop.as(Nodes[Nnelem])
		var p1 = new Nalt(null, n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nalt)
end
private fun reduce_Nalt_95d2(parser: Parser) do
		# REDUCE alt::alt_2=altid atrans
		var n1 = parser.pop.as(Natrans)
		var n0 = parser.pop.as(Naltid)
		var p1 = new Nalt(n0, null, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nalt)
end
private fun reduce_Nalt_95d3(parser: Parser) do
		# REDUCE alt::alt_3=atrans
		var n0 = parser.pop.as(Natrans)
		var p1 = new Nalt(null, null, n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nalt)
end
private fun reduce_Nalt_95d4(parser: Parser) do
		# REDUCE alt::alt_4=altid nelem+
		var n1 = parser.pop.as(Nodes[Nnelem])
		var n0 = parser.pop.as(Naltid)
		var p1 = new Nalt(n0, n1, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nalt)
end
private fun reduce_Nalt_95d5(parser: Parser) do
		# REDUCE alt::alt_5=nelem+
		var n0 = parser.pop.as(Nodes[Nnelem])
		var p1 = new Nalt(null, n0, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nalt)
end
private fun reduce_Nalt_95d6(parser: Parser) do
		# REDUCE alt::alt_6=altid
		var n0 = parser.pop.as(Naltid)
		var p1 = new Nalt(n0, null, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nalt)
end
private fun reduce_Nalt_95d7(parser: Parser) do
		# REDUCE alt::alt_7=
		var p1 = new Nalt(null, null, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nalt)
end
private fun goto_Naltid: Goto_Naltid do return once new Goto_Naltid
private fun reduce_Naltid_95d0(parser: Parser) do
		# REDUCE altid::altid_0='{' id ':' '}'
		var n3 = parser.pop.as(N_39d_125d_39d)
		var n2 = parser.pop.as(N_39d_58d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39d_123d_39d)
		var p1 = new Naltid_95d0(n0, n1, n2, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Naltid)
end
private fun reduce_Naltid_95d1(parser: Parser) do
		# REDUCE altid::altid_1='{' id '}'
		var n2 = parser.pop.as(N_39d_125d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39d_123d_39d)
		var p1 = new Naltid_95d1(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Naltid)
end
private fun goto_Nnelem: Goto_Nnelem do return once new Goto_Nnelem
private fun reduce_Nnelem_95d0(parser: Parser) do
		# REDUCE nelem::nelem_0=elem
		var n0 = parser.pop.as(Nelem)
		var p1 = new Nnelem_95d0(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nnelem)
end
private fun reduce_Nnelem_95d1(parser: Parser) do
		# REDUCE nelem::nelem_1=elemid elem
		var n1 = parser.pop.as(Nelem)
		var n0 = parser.pop.as(Nelemid)
		var p1 = new Nnelem_95d1(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nnelem)
end
private fun goto_Nelemid: Goto_Nelemid do return once new Goto_Nelemid
private fun reduce_Nelemid_95d0(parser: Parser) do
		# REDUCE elemid::elemid_0='[' id ':' ']'
		var n3 = parser.pop.as(N_39d_93d_39d)
		var n2 = parser.pop.as(N_39d_58d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39d_91d_39d)
		var p1 = new Nelemid_95d0(n0, n1, n2, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelemid)
end
private fun reduce_Nelemid_95d1(parser: Parser) do
		# REDUCE elemid::elemid_1='[' id ']' ':'
		var n3 = parser.pop.as(N_39d_58d_39d)
		var n2 = parser.pop.as(N_39d_93d_39d)
		var n1 = parser.pop.as(Nid)
		var n0 = parser.pop.as(N_39d_91d_39d)
		var p1 = new Nelemid_95d1(n0, n1, n2, n3)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelemid)
end
private fun goto_Nelem_list: Goto_Nelem_list do return once new Goto_Nelem_list
private fun reduce_Nelem_list_more(parser: Parser) do
		# REDUCE elem_list::elem_list_more=elem_list ',' elem
		var n2 = parser.pop.as(Nelem)
		var n1 = parser.pop.as(N_39d_44d_39d)
		var n0 = parser.pop.as(Nelem_list)
		var p1 = new Nelem_list_more(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelem_list)
end
private fun reduce_Nelem_list_one(parser: Parser) do
		# REDUCE elem_list::elem_list_one=elem
		var n0 = parser.pop.as(Nelem)
		var p1 = new Nelem_list_one(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelem_list)
end
private fun goto_Nelem: Goto_Nelem do return once new Goto_Nelem
private fun reduce_Nelem_id(parser: Parser) do
		# REDUCE elem::elem_id=id
		var n0 = parser.pop.as(Nid)
		var p1 = new Nelem_id(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelem)
end
private fun reduce_Nelem_str(parser: Parser) do
		# REDUCE elem::elem_str=text
		var n0 = parser.pop.as(Nre)
		var p1 = new Nelem_str(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelem)
end
private fun reduce_Nelem_star(parser: Parser) do
		# REDUCE elem::elem_star=elem '*'
		var n1 = parser.pop.as(N_39d_42d_39d)
		var n0 = parser.pop.as(Nelem)
		var p1 = new Nelem_star(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelem)
end
private fun reduce_Nelem_ques(parser: Parser) do
		# REDUCE elem::elem_ques=elem '?'
		var n1 = parser.pop.as(N_39d_63d_39d)
		var n0 = parser.pop.as(Nelem)
		var p1 = new Nelem_ques(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelem)
end
private fun reduce_Nelem_plus(parser: Parser) do
		# REDUCE elem::elem_plus=elem '+'
		var n1 = parser.pop.as(N_39d_43d_39d)
		var n0 = parser.pop.as(Nelem)
		var p1 = new Nelem_plus(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelem)
end
private fun reduce_Nelem_par(parser: Parser) do
		# REDUCE elem::elem_par='(' elem+ ')'
		var n2 = parser.pop.as(N_39d_41d_39d)
		var n1 = parser.pop.as(Nodes[Nelem])
		var n0 = parser.pop.as(N_39d_40d_39d)
		var p1 = new Nelem_par(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelem)
end
private fun reduce_Nelem_empty(parser: Parser) do
		# REDUCE elem::elem_empty='Empty'
		var n0 = parser.pop.as(N_39dEmpty_39d)
		var p1 = new Nelem_empty(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelem)
end
private fun goto_Npriority: Goto_Npriority do return once new Goto_Npriority
private fun reduce_Npriority_left(parser: Parser) do
		# REDUCE priority::priority_left='Left' alts
		var n1 = parser.pop.as(Nalts)
		var n0 = parser.pop.as(N_39dLeft_39d)
		var p1 = new Npriority_left(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Npriority)
end
private fun reduce_Npriority_right(parser: Parser) do
		# REDUCE priority::priority_right='Right' alts
		var n1 = parser.pop.as(Nalts)
		var n0 = parser.pop.as(N_39dRight_39d)
		var p1 = new Npriority_right(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Npriority)
end
private fun reduce_Npriority_unary(parser: Parser) do
		# REDUCE priority::priority_unary='Unary' alts
		var n1 = parser.pop.as(Nalts)
		var n0 = parser.pop.as(N_39dUnary_39d)
		var p1 = new Npriority_unary(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Npriority)
end
private fun goto_Ntree_part: Goto_Ntree_part do return once new Goto_Ntree_part
private fun reduce_Ntree_part_95d0(parser: Parser) do
		# REDUCE tree_part::tree_part_0='Tree' prod+
		var n1 = parser.pop.as(Nodes[Nprod])
		var n0 = parser.pop.as(N_39dTree_39d)
		var p1 = new Ntree_part(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ntree_part)
end
private fun reduce_Ntree_part_95d1(parser: Parser) do
		# REDUCE tree_part::tree_part_1='Tree'
		var n0 = parser.pop.as(N_39dTree_39d)
		var p1 = new Ntree_part(n0, null)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Ntree_part)
end
private fun goto_Nexpr_43d: Goto_Nexpr_43d do return once new Goto_Nexpr_43d
private fun reduce_Nexpr_43d_one(parser: Parser) do
		# REDUCE expr+::expr+_one=expr
		var n0 = parser.pop.as(Nexpr)
		var p1 = new Nodes[Nexpr]
		p1.children.add(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nexpr_43d)
end
private fun reduce_Nexpr_43d_more(parser: Parser) do
		# REDUCE expr+::expr+_more=expr+ expr
		var n1 = parser.pop.as(Nexpr)
		var n0 = parser.pop.as(Nodes[Nexpr])
		n0.children.add(n1)
		var prod = n0
		parser.node_stack.push prod
		parser.goto(goto_Nexpr_43d)
end
private fun goto_Nprod_43d: Goto_Nprod_43d do return once new Goto_Nprod_43d
private fun reduce_Nprod_43d_one(parser: Parser) do
		# REDUCE prod+::prod+_one=prod
		var n0 = parser.pop.as(Nprod)
		var p1 = new Nodes[Nprod]
		p1.children.add(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nprod_43d)
end
private fun reduce_Nprod_43d_more(parser: Parser) do
		# REDUCE prod+::prod+_more=prod+ prod
		var n1 = parser.pop.as(Nprod)
		var n0 = parser.pop.as(Nodes[Nprod])
		n0.children.add(n1)
		var prod = n0
		parser.node_stack.push prod
		parser.goto(goto_Nprod_43d)
end
private fun goto_Npriority_43d: Goto_Npriority_43d do return once new Goto_Npriority_43d
private fun reduce_Npriority_43d_one(parser: Parser) do
		# REDUCE priority+::priority+_one=priority
		var n0 = parser.pop.as(Npriority)
		var p1 = new Nodes[Npriority]
		p1.children.add(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Npriority_43d)
end
private fun reduce_Npriority_43d_more(parser: Parser) do
		# REDUCE priority+::priority+_more=priority+ priority
		var n1 = parser.pop.as(Npriority)
		var n0 = parser.pop.as(Nodes[Npriority])
		n0.children.add(n1)
		var prod = n0
		parser.node_stack.push prod
		parser.goto(goto_Npriority_43d)
end
private fun goto_Nnelem_43d: Goto_Nnelem_43d do return once new Goto_Nnelem_43d
private fun reduce_Nnelem_43d_one(parser: Parser) do
		# REDUCE nelem+::nelem+_one=nelem
		var n0 = parser.pop.as(Nnelem)
		var p1 = new Nodes[Nnelem]
		p1.children.add(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nnelem_43d)
end
private fun reduce_Nnelem_43d_more(parser: Parser) do
		# REDUCE nelem+::nelem+_more=nelem+ nelem
		var n1 = parser.pop.as(Nnelem)
		var n0 = parser.pop.as(Nodes[Nnelem])
		n0.children.add(n1)
		var prod = n0
		parser.node_stack.push prod
		parser.goto(goto_Nnelem_43d)
end
private fun goto_Nelem_43d: Goto_Nelem_43d do return once new Goto_Nelem_43d
private fun reduce_Nelem_43d_one(parser: Parser) do
		# REDUCE elem+::elem+_one=elem
		var n0 = parser.pop.as(Nelem)
		var p1 = new Nodes[Nelem]
		p1.children.add(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nelem_43d)
end
private fun reduce_Nelem_43d_more(parser: Parser) do
		# REDUCE elem+::elem+_more=elem+ elem
		var n1 = parser.pop.as(Nelem)
		var n0 = parser.pop.as(Nodes[Nelem])
		n0.children.add(n1)
		var prod = n0
		parser.node_stack.push prod
		parser.goto(goto_Nelem_43d)
end
private fun goto_N_start: Goto_N_start do return once new Goto_N_start
private fun reduce_NStart(parser: Parser) do
		# REDUCE _start::Start=grammar Eof
		var n1 = parser.pop.as(NEof)
		var n0 = parser.pop.as(Ngrammar)
		var p1 = new NStart(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.stop = true
end
redef class NToken
	# guarded action for state 0 
	# 1 shift(s) and 0 reduce(s)
	private fun action_s0(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 1 grammar
	# 1 shift(s) and 0 reduce(s)
	private fun action_s1(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 2 'Grammar'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s2(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 4 'Grammar' id
	# 1 shift(s) and 0 reduce(s)
	private fun action_s4(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 5 'Grammar' id ';'
	# 3 shift(s) and 1 reduce(s)
	private fun action_s5(parser: Parser) do
		reduce_Ngrammar_95d7(parser)
	end
	# guarded action for state 6 'Grammar' id ';' lexer_part
	# 2 shift(s) and 1 reduce(s)
	private fun action_s6(parser: Parser) do
		reduce_Ngrammar_95d6(parser)
	end
	# guarded action for state 7 'Grammar' id ';' parser_part
	# 1 shift(s) and 1 reduce(s)
	private fun action_s7(parser: Parser) do
		reduce_Ngrammar_95d5(parser)
	end
	# guarded action for state 9 'Grammar' id ';' 'Lexer'
	# 1 shift(s) and 1 reduce(s)
	private fun action_s9(parser: Parser) do
		reduce_Nlexer_part_95d1(parser)
	end
	# guarded action for state 10 'Grammar' id ';' 'Parser'
	# 3 shift(s) and 1 reduce(s)
	private fun action_s10(parser: Parser) do
		reduce_Nparser_part_95d7(parser)
	end
	# guarded action for state 11 'Grammar' id ';' 'Tree'
	# 1 shift(s) and 1 reduce(s)
	private fun action_s11(parser: Parser) do
		reduce_Ntree_part_95d1(parser)
	end
	# guarded action for state 12 'Grammar' id ';' lexer_part parser_part
	# 1 shift(s) and 1 reduce(s)
	private fun action_s12(parser: Parser) do
		reduce_Ngrammar_95d4(parser)
	end
	# guarded action for state 15 'Grammar' id ';' 'Lexer' expr+
	# 1 shift(s) and 1 reduce(s)
	private fun action_s15(parser: Parser) do
		reduce_Nlexer_part_95d0(parser)
	end
	# guarded action for state 17 'Grammar' id ';' 'Lexer' id
	# 1 shift(s) and 0 reduce(s)
	private fun action_s17(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 18 'Grammar' id ';' 'Parser' ign
	# 2 shift(s) and 1 reduce(s)
	private fun action_s18(parser: Parser) do
		reduce_Nparser_part_95d6(parser)
	end
	# guarded action for state 19 'Grammar' id ';' 'Parser' rej
	# 1 shift(s) and 1 reduce(s)
	private fun action_s19(parser: Parser) do
		reduce_Nparser_part_95d5(parser)
	end
	# guarded action for state 20 'Grammar' id ';' 'Parser' prod+
	# 1 shift(s) and 1 reduce(s)
	private fun action_s20(parser: Parser) do
		reduce_Nparser_part_95d3(parser)
	end
	# guarded action for state 21 'Grammar' id ';' 'Parser' 'Ignored'
	# 6 shift(s) and 0 reduce(s)
	private fun action_s21(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 22 'Grammar' id ';' 'Parser' 'Rejected'
	# 6 shift(s) and 0 reduce(s)
	private fun action_s22(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 24 'Grammar' id ';' 'Parser' id
	# 2 shift(s) and 0 reduce(s)
	private fun action_s24(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 25 'Grammar' id ';' 'Tree' prod+
	# 1 shift(s) and 1 reduce(s)
	private fun action_s25(parser: Parser) do
		reduce_Ntree_part_95d0(parser)
	end
	# guarded action for state 28 'Grammar' id ';' 'Lexer' id '='
	# 10 shift(s) and 0 reduce(s)
	private fun action_s28(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 29 'Grammar' id ';' 'Parser' ign rej
	# 1 shift(s) and 1 reduce(s)
	private fun action_s29(parser: Parser) do
		reduce_Nparser_part_95d4(parser)
	end
	# guarded action for state 30 'Grammar' id ';' 'Parser' ign prod+
	# 1 shift(s) and 1 reduce(s)
	private fun action_s30(parser: Parser) do
		reduce_Nparser_part_95d2(parser)
	end
	# guarded action for state 31 'Grammar' id ';' 'Parser' rej prod+
	# 1 shift(s) and 1 reduce(s)
	private fun action_s31(parser: Parser) do
		reduce_Nparser_part_95d1(parser)
	end
	# guarded action for state 33 'Grammar' id ';' 'Parser' 'Ignored' elem_list
	# 2 shift(s) and 0 reduce(s)
	private fun action_s33(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 34 'Grammar' id ';' 'Parser' 'Ignored' elem
	# 3 shift(s) and 1 reduce(s)
	private fun action_s34(parser: Parser) do
		reduce_Nelem_list_one(parser)
	end
	# guarded action for state 40 'Grammar' id ';' 'Parser' 'Ignored' '('
	# 6 shift(s) and 0 reduce(s)
	private fun action_s40(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 42 'Grammar' id ';' 'Parser' 'Rejected' elem_list
	# 2 shift(s) and 0 reduce(s)
	private fun action_s42(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 43 'Grammar' id ';' 'Parser' id ptrans
	# 1 shift(s) and 0 reduce(s)
	private fun action_s43(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 44 'Grammar' id ';' 'Parser' id '='
	# 8 shift(s) and 1 reduce(s)
	private fun action_s44(parser: Parser) do
		reduce_Nalt_95d7(parser)
	end
	# guarded action for state 45 'Grammar' id ';' 'Parser' id '{'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s45(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 46 'Grammar' id ';' 'Lexer' id '=' re
	# 2 shift(s) and 0 reduce(s)
	private fun action_s46(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 47 'Grammar' id ';' 'Lexer' id '=' re1
	# 3 shift(s) and 1 reduce(s)
	private fun action_s47(parser: Parser) do
		reduce_Nre_95d1(parser)
	end
	# guarded action for state 48 'Grammar' id ';' 'Lexer' id '=' re2
	# 10 shift(s) and 1 reduce(s)
	private fun action_s48(parser: Parser) do
		reduce_Nre1_95d3(parser)
	end
	# guarded action for state 49 'Grammar' id ';' 'Lexer' id '=' re3
	# 3 shift(s) and 1 reduce(s)
	private fun action_s49(parser: Parser) do
		reduce_Nre2_95d1(parser)
	end
	# guarded action for state 50 'Grammar' id ';' 'Lexer' id '=' 'Shortest'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s50(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 51 'Grammar' id ';' 'Lexer' id '=' 'Longest'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s51(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 52 'Grammar' id ';' 'Lexer' id '=' 'Prefixes'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s52(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 54 'Grammar' id ';' 'Lexer' id '=' '('
	# 10 shift(s) and 0 reduce(s)
	private fun action_s54(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 55 'Grammar' id ';' 'Lexer' id '=' text
	# 1 shift(s) and 1 reduce(s)
	private fun action_s55(parser: Parser) do
		reduce_Nre_text(parser)
	end
	# guarded action for state 58 'Grammar' id ';' 'Parser' ign rej prod+
	# 1 shift(s) and 1 reduce(s)
	private fun action_s58(parser: Parser) do
		reduce_Nparser_part_95d0(parser)
	end
	# guarded action for state 60 'Grammar' id ';' 'Parser' 'Ignored' elem_list ','
	# 6 shift(s) and 0 reduce(s)
	private fun action_s60(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 64 'Grammar' id ';' 'Parser' 'Ignored' '(' elem+
	# 7 shift(s) and 0 reduce(s)
	private fun action_s64(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 65 'Grammar' id ';' 'Parser' 'Ignored' '(' elem
	# 3 shift(s) and 1 reduce(s)
	private fun action_s65(parser: Parser) do
		reduce_Nelem_43d_one(parser)
	end
	# guarded action for state 67 'Grammar' id ';' 'Parser' id ptrans '='
	# 8 shift(s) and 1 reduce(s)
	private fun action_s67(parser: Parser) do
		reduce_Nalt_95d7(parser)
	end
	# guarded action for state 68 'Grammar' id ';' 'Parser' id '=' alts
	# 5 shift(s) and 0 reduce(s)
	private fun action_s68(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 70 'Grammar' id ';' 'Parser' id '=' altid
	# 8 shift(s) and 1 reduce(s)
	private fun action_s70(parser: Parser) do
		reduce_Nalt_95d6(parser)
	end
	# guarded action for state 71 'Grammar' id ';' 'Parser' id '=' '{'
	# 2 shift(s) and 0 reduce(s)
	private fun action_s71(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 72 'Grammar' id ';' 'Parser' id '=' nelem+
	# 8 shift(s) and 1 reduce(s)
	private fun action_s72(parser: Parser) do
		reduce_Nalt_95d5(parser)
	end
	# guarded action for state 74 'Grammar' id ';' 'Parser' id '=' elem
	# 3 shift(s) and 1 reduce(s)
	private fun action_s74(parser: Parser) do
		reduce_Nnelem_95d0(parser)
	end
	# guarded action for state 75 'Grammar' id ';' 'Parser' id '=' elemid
	# 6 shift(s) and 0 reduce(s)
	private fun action_s75(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 76 'Grammar' id ';' 'Parser' id '=' '['
	# 1 shift(s) and 0 reduce(s)
	private fun action_s76(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 78 'Grammar' id ';' 'Parser' id '{' '->'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s78(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 80 'Grammar' id ';' 'Lexer' id '=' re '|'
	# 10 shift(s) and 0 reduce(s)
	private fun action_s80(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 81 'Grammar' id ';' 'Lexer' id '=' re1 '-'
	# 10 shift(s) and 0 reduce(s)
	private fun action_s81(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 82 'Grammar' id ';' 'Lexer' id '=' re1 'Except'
	# 10 shift(s) and 0 reduce(s)
	private fun action_s82(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 83 'Grammar' id ';' 'Lexer' id '=' re1 'And'
	# 10 shift(s) and 0 reduce(s)
	private fun action_s83(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 84 'Grammar' id ';' 'Lexer' id '=' re2 re3
	# 3 shift(s) and 1 reduce(s)
	private fun action_s84(parser: Parser) do
		reduce_Nre_conc(parser)
	end
	# guarded action for state 88 'Grammar' id ';' 'Lexer' id '=' 'Shortest' '('
	# 10 shift(s) and 0 reduce(s)
	private fun action_s88(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 89 'Grammar' id ';' 'Lexer' id '=' 'Longest' '('
	# 10 shift(s) and 0 reduce(s)
	private fun action_s89(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 90 'Grammar' id ';' 'Lexer' id '=' 'Prefixes' '('
	# 10 shift(s) and 0 reduce(s)
	private fun action_s90(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 91 'Grammar' id ';' 'Lexer' id '=' '(' re
	# 2 shift(s) and 0 reduce(s)
	private fun action_s91(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 92 'Grammar' id ';' 'Lexer' id '=' text '.'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s92(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 93 'Grammar' id ';' 'Parser' 'Ignored' elem_list ',' elem
	# 3 shift(s) and 1 reduce(s)
	private fun action_s93(parser: Parser) do
		reduce_Nelem_list_more(parser)
	end
	# guarded action for state 95 'Grammar' id ';' 'Parser' 'Ignored' '(' elem+ elem
	# 3 shift(s) and 1 reduce(s)
	private fun action_s95(parser: Parser) do
		reduce_Nelem_43d_more(parser)
	end
	# guarded action for state 96 'Grammar' id ';' 'Parser' id ptrans '=' alts
	# 5 shift(s) and 0 reduce(s)
	private fun action_s96(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 97 'Grammar' id ';' 'Parser' id '=' alts priority+
	# 4 shift(s) and 0 reduce(s)
	private fun action_s97(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 99 'Grammar' id ';' 'Parser' id '=' alts '|'
	# 8 shift(s) and 1 reduce(s)
	private fun action_s99(parser: Parser) do
		reduce_Nalt_95d7(parser)
	end
	# guarded action for state 101 'Grammar' id ';' 'Parser' id '=' alts 'Left'
	# 8 shift(s) and 1 reduce(s)
	private fun action_s101(parser: Parser) do
		reduce_Nalt_95d7(parser)
	end
	# guarded action for state 102 'Grammar' id ';' 'Parser' id '=' alts 'Right'
	# 8 shift(s) and 1 reduce(s)
	private fun action_s102(parser: Parser) do
		reduce_Nalt_95d7(parser)
	end
	# guarded action for state 103 'Grammar' id ';' 'Parser' id '=' alts 'Unary'
	# 8 shift(s) and 1 reduce(s)
	private fun action_s103(parser: Parser) do
		reduce_Nalt_95d7(parser)
	end
	# guarded action for state 104 'Grammar' id ';' 'Parser' id '=' altid nelem+
	# 8 shift(s) and 1 reduce(s)
	private fun action_s104(parser: Parser) do
		reduce_Nalt_95d4(parser)
	end
	# guarded action for state 106 'Grammar' id ';' 'Parser' id '=' altid '{'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s106(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 107 'Grammar' id ';' 'Parser' id '=' '{' id
	# 2 shift(s) and 0 reduce(s)
	private fun action_s107(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 108 'Grammar' id ';' 'Parser' id '=' '{' '->'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s108(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 111 'Grammar' id ';' 'Parser' id '=' elemid elem
	# 3 shift(s) and 1 reduce(s)
	private fun action_s111(parser: Parser) do
		reduce_Nnelem_95d1(parser)
	end
	# guarded action for state 112 'Grammar' id ';' 'Parser' id '=' '[' id
	# 2 shift(s) and 0 reduce(s)
	private fun action_s112(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 113 'Grammar' id ';' 'Parser' id '{' '->' id
	# 1 shift(s) and 0 reduce(s)
	private fun action_s113(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 114 'Grammar' id ';' 'Lexer' id '=' re '|' re1
	# 3 shift(s) and 1 reduce(s)
	private fun action_s114(parser: Parser) do
		reduce_Nre_alter(parser)
	end
	# guarded action for state 115 'Grammar' id ';' 'Lexer' id '=' re1 '-' re2
	# 10 shift(s) and 1 reduce(s)
	private fun action_s115(parser: Parser) do
		reduce_Nre_minus(parser)
	end
	# guarded action for state 116 'Grammar' id ';' 'Lexer' id '=' re1 'Except' re2
	# 10 shift(s) and 1 reduce(s)
	private fun action_s116(parser: Parser) do
		reduce_Nre_except(parser)
	end
	# guarded action for state 117 'Grammar' id ';' 'Lexer' id '=' re1 'And' re2
	# 10 shift(s) and 1 reduce(s)
	private fun action_s117(parser: Parser) do
		reduce_Nre_and(parser)
	end
	# guarded action for state 118 'Grammar' id ';' 'Lexer' id '=' 'Shortest' '(' re
	# 2 shift(s) and 0 reduce(s)
	private fun action_s118(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 119 'Grammar' id ';' 'Lexer' id '=' 'Longest' '(' re
	# 2 shift(s) and 0 reduce(s)
	private fun action_s119(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 120 'Grammar' id ';' 'Lexer' id '=' 'Prefixes' '(' re
	# 2 shift(s) and 0 reduce(s)
	private fun action_s120(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 122 'Grammar' id ';' 'Lexer' id '=' text '.' '.'
	# 4 shift(s) and 0 reduce(s)
	private fun action_s122(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 123 'Grammar' id ';' 'Parser' id ptrans '=' alts priority+
	# 4 shift(s) and 0 reduce(s)
	private fun action_s123(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 128 'Grammar' id ';' 'Parser' id '=' alts 'Left' alts
	# 1 shift(s) and 1 reduce(s)
	private fun action_s128(parser: Parser) do
		reduce_Npriority_left(parser)
	end
	# guarded action for state 129 'Grammar' id ';' 'Parser' id '=' alts 'Right' alts
	# 1 shift(s) and 1 reduce(s)
	private fun action_s129(parser: Parser) do
		reduce_Npriority_right(parser)
	end
	# guarded action for state 130 'Grammar' id ';' 'Parser' id '=' alts 'Unary' alts
	# 1 shift(s) and 1 reduce(s)
	private fun action_s130(parser: Parser) do
		reduce_Npriority_unary(parser)
	end
	# guarded action for state 132 'Grammar' id ';' 'Parser' id '=' '{' id ':'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s132(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 135 'Grammar' id ';' 'Parser' id '=' '[' id ':'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s135(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state 136 'Grammar' id ';' 'Parser' id '=' '[' id ']'
	# 1 shift(s) and 0 reduce(s)
	private fun action_s136(parser: Parser) do
		parser.parse_error
	end
end
redef class Nunknown_keyword
end
redef class N_39dGrammar_39d
	redef fun action_s0(parser) do
		parser.shift(state_2)
	end
end
redef class Nid
	redef fun action_s2(parser) do
		parser.shift(state_4)
	end
	redef fun action_s9(parser) do
		parser.shift(state_17)
	end
	redef fun action_s10(parser) do
		parser.shift(state_24)
	end
	redef fun action_s11(parser) do
		parser.shift(state_24)
	end
	redef fun action_s15(parser) do
		parser.shift(state_17)
	end
	redef fun action_s18(parser) do
		parser.shift(state_24)
	end
	redef fun action_s19(parser) do
		parser.shift(state_24)
	end
	redef fun action_s20(parser) do
		parser.shift(state_24)
	end
	redef fun action_s21(parser) do
		parser.shift(state_35)
	end
	redef fun action_s22(parser) do
		parser.shift(state_35)
	end
	redef fun action_s25(parser) do
		parser.shift(state_24)
	end
	redef fun action_s28(parser) do
		parser.shift(state_53)
	end
	redef fun action_s29(parser) do
		parser.shift(state_24)
	end
	redef fun action_s30(parser) do
		parser.shift(state_24)
	end
	redef fun action_s31(parser) do
		parser.shift(state_24)
	end
	redef fun action_s40(parser) do
		parser.shift(state_35)
	end
	redef fun action_s44(parser) do
		parser.shift(state_35)
	end
	redef fun action_s48(parser) do
		parser.shift(state_53)
	end
	redef fun action_s54(parser) do
		parser.shift(state_53)
	end
	redef fun action_s58(parser) do
		parser.shift(state_24)
	end
	redef fun action_s60(parser) do
		parser.shift(state_35)
	end
	redef fun action_s64(parser) do
		parser.shift(state_35)
	end
	redef fun action_s67(parser) do
		parser.shift(state_35)
	end
	redef fun action_s70(parser) do
		parser.shift(state_35)
	end
	redef fun action_s71(parser) do
		parser.shift(state_107)
	end
	redef fun action_s72(parser) do
		parser.shift(state_35)
	end
	redef fun action_s75(parser) do
		parser.shift(state_35)
	end
	redef fun action_s76(parser) do
		parser.shift(state_112)
	end
	redef fun action_s78(parser) do
		parser.shift(state_113)
	end
	redef fun action_s80(parser) do
		parser.shift(state_53)
	end
	redef fun action_s81(parser) do
		parser.shift(state_53)
	end
	redef fun action_s82(parser) do
		parser.shift(state_53)
	end
	redef fun action_s83(parser) do
		parser.shift(state_53)
	end
	redef fun action_s88(parser) do
		parser.shift(state_53)
	end
	redef fun action_s89(parser) do
		parser.shift(state_53)
	end
	redef fun action_s90(parser) do
		parser.shift(state_53)
	end
	redef fun action_s99(parser) do
		parser.shift(state_35)
	end
	redef fun action_s101(parser) do
		parser.shift(state_35)
	end
	redef fun action_s102(parser) do
		parser.shift(state_35)
	end
	redef fun action_s103(parser) do
		parser.shift(state_35)
	end
	redef fun action_s104(parser) do
		parser.shift(state_35)
	end
	redef fun action_s115(parser) do
		parser.shift(state_53)
	end
	redef fun action_s116(parser) do
		parser.shift(state_53)
	end
	redef fun action_s117(parser) do
		parser.shift(state_53)
	end
end
redef class N_39d_59d_39d
	redef fun action_s4(parser) do
		parser.shift(state_5)
	end
	redef fun action_s33(parser) do
		parser.shift(state_59)
	end
	redef fun action_s42(parser) do
		parser.shift(state_66)
	end
	redef fun action_s46(parser) do
		parser.shift(state_79)
	end
	redef fun action_s68(parser) do
		parser.shift(state_98)
	end
	redef fun action_s96(parser) do
		parser.shift(state_124)
	end
	redef fun action_s97(parser) do
		parser.shift(state_125)
	end
	redef fun action_s123(parser) do
		parser.shift(state_143)
	end
end
redef class N_39dLexer_39d
	redef fun action_s5(parser) do
		parser.shift(state_9)
	end
end
redef class N_39d_61d_39d
	redef fun action_s17(parser) do
		parser.shift(state_28)
	end
	redef fun action_s24(parser) do
		parser.shift(state_44)
	end
	redef fun action_s43(parser) do
		parser.shift(state_67)
	end
end
redef class N_39d_124d_39d
	redef fun action_s46(parser) do
		parser.shift(state_80)
	end
	redef fun action_s68(parser) do
		parser.shift(state_99)
	end
	redef fun action_s91(parser) do
		parser.shift(state_80)
	end
	redef fun action_s96(parser) do
		parser.shift(state_99)
	end
	redef fun action_s118(parser) do
		parser.shift(state_80)
	end
	redef fun action_s119(parser) do
		parser.shift(state_80)
	end
	redef fun action_s120(parser) do
		parser.shift(state_80)
	end
	redef fun action_s128(parser) do
		parser.shift(state_99)
	end
	redef fun action_s129(parser) do
		parser.shift(state_99)
	end
	redef fun action_s130(parser) do
		parser.shift(state_99)
	end
end
redef class N_39d_45d_39d
	redef fun action_s47(parser) do
		parser.shift(state_81)
	end
	redef fun action_s114(parser) do
		parser.shift(state_81)
	end
end
redef class N_39dExcept_39d
	redef fun action_s47(parser) do
		parser.shift(state_82)
	end
	redef fun action_s114(parser) do
		parser.shift(state_82)
	end
end
redef class N_39dAnd_39d
	redef fun action_s47(parser) do
		parser.shift(state_83)
	end
	redef fun action_s114(parser) do
		parser.shift(state_83)
	end
end
redef class N_39d_63d_39d
	redef fun action_s34(parser) do
		parser.shift(state_62)
	end
	redef fun action_s49(parser) do
		parser.shift(state_85)
	end
	redef fun action_s65(parser) do
		parser.shift(state_62)
	end
	redef fun action_s74(parser) do
		parser.shift(state_62)
	end
	redef fun action_s84(parser) do
		parser.shift(state_85)
	end
	redef fun action_s93(parser) do
		parser.shift(state_62)
	end
	redef fun action_s95(parser) do
		parser.shift(state_62)
	end
	redef fun action_s111(parser) do
		parser.shift(state_62)
	end
end
redef class N_39d_42d_39d
	redef fun action_s34(parser) do
		parser.shift(state_61)
	end
	redef fun action_s49(parser) do
		parser.shift(state_86)
	end
	redef fun action_s65(parser) do
		parser.shift(state_61)
	end
	redef fun action_s74(parser) do
		parser.shift(state_61)
	end
	redef fun action_s84(parser) do
		parser.shift(state_86)
	end
	redef fun action_s93(parser) do
		parser.shift(state_61)
	end
	redef fun action_s95(parser) do
		parser.shift(state_61)
	end
	redef fun action_s111(parser) do
		parser.shift(state_61)
	end
end
redef class N_39d_43d_39d
	redef fun action_s34(parser) do
		parser.shift(state_63)
	end
	redef fun action_s49(parser) do
		parser.shift(state_87)
	end
	redef fun action_s65(parser) do
		parser.shift(state_63)
	end
	redef fun action_s74(parser) do
		parser.shift(state_63)
	end
	redef fun action_s84(parser) do
		parser.shift(state_87)
	end
	redef fun action_s93(parser) do
		parser.shift(state_63)
	end
	redef fun action_s95(parser) do
		parser.shift(state_63)
	end
	redef fun action_s111(parser) do
		parser.shift(state_63)
	end
end
redef class N_39dShortest_39d
	redef fun action_s28(parser) do
		parser.shift(state_50)
	end
	redef fun action_s48(parser) do
		parser.shift(state_50)
	end
	redef fun action_s54(parser) do
		parser.shift(state_50)
	end
	redef fun action_s80(parser) do
		parser.shift(state_50)
	end
	redef fun action_s81(parser) do
		parser.shift(state_50)
	end
	redef fun action_s82(parser) do
		parser.shift(state_50)
	end
	redef fun action_s83(parser) do
		parser.shift(state_50)
	end
	redef fun action_s88(parser) do
		parser.shift(state_50)
	end
	redef fun action_s89(parser) do
		parser.shift(state_50)
	end
	redef fun action_s90(parser) do
		parser.shift(state_50)
	end
	redef fun action_s115(parser) do
		parser.shift(state_50)
	end
	redef fun action_s116(parser) do
		parser.shift(state_50)
	end
	redef fun action_s117(parser) do
		parser.shift(state_50)
	end
end
redef class N_39d_40d_39d
	redef fun action_s21(parser) do
		parser.shift(state_40)
	end
	redef fun action_s22(parser) do
		parser.shift(state_40)
	end
	redef fun action_s28(parser) do
		parser.shift(state_54)
	end
	redef fun action_s40(parser) do
		parser.shift(state_40)
	end
	redef fun action_s44(parser) do
		parser.shift(state_40)
	end
	redef fun action_s48(parser) do
		parser.shift(state_54)
	end
	redef fun action_s50(parser) do
		parser.shift(state_88)
	end
	redef fun action_s51(parser) do
		parser.shift(state_89)
	end
	redef fun action_s52(parser) do
		parser.shift(state_90)
	end
	redef fun action_s54(parser) do
		parser.shift(state_54)
	end
	redef fun action_s60(parser) do
		parser.shift(state_40)
	end
	redef fun action_s64(parser) do
		parser.shift(state_40)
	end
	redef fun action_s67(parser) do
		parser.shift(state_40)
	end
	redef fun action_s70(parser) do
		parser.shift(state_40)
	end
	redef fun action_s72(parser) do
		parser.shift(state_40)
	end
	redef fun action_s75(parser) do
		parser.shift(state_40)
	end
	redef fun action_s80(parser) do
		parser.shift(state_54)
	end
	redef fun action_s81(parser) do
		parser.shift(state_54)
	end
	redef fun action_s82(parser) do
		parser.shift(state_54)
	end
	redef fun action_s83(parser) do
		parser.shift(state_54)
	end
	redef fun action_s88(parser) do
		parser.shift(state_54)
	end
	redef fun action_s89(parser) do
		parser.shift(state_54)
	end
	redef fun action_s90(parser) do
		parser.shift(state_54)
	end
	redef fun action_s99(parser) do
		parser.shift(state_40)
	end
	redef fun action_s101(parser) do
		parser.shift(state_40)
	end
	redef fun action_s102(parser) do
		parser.shift(state_40)
	end
	redef fun action_s103(parser) do
		parser.shift(state_40)
	end
	redef fun action_s104(parser) do
		parser.shift(state_40)
	end
	redef fun action_s115(parser) do
		parser.shift(state_54)
	end
	redef fun action_s116(parser) do
		parser.shift(state_54)
	end
	redef fun action_s117(parser) do
		parser.shift(state_54)
	end
end
redef class N_39d_41d_39d
	redef fun action_s64(parser) do
		parser.shift(state_94)
	end
	redef fun action_s91(parser) do
		parser.shift(state_121)
	end
	redef fun action_s118(parser) do
		parser.shift(state_138)
	end
	redef fun action_s119(parser) do
		parser.shift(state_139)
	end
	redef fun action_s120(parser) do
		parser.shift(state_140)
	end
end
redef class N_39dLongest_39d
	redef fun action_s28(parser) do
		parser.shift(state_51)
	end
	redef fun action_s48(parser) do
		parser.shift(state_51)
	end
	redef fun action_s54(parser) do
		parser.shift(state_51)
	end
	redef fun action_s80(parser) do
		parser.shift(state_51)
	end
	redef fun action_s81(parser) do
		parser.shift(state_51)
	end
	redef fun action_s82(parser) do
		parser.shift(state_51)
	end
	redef fun action_s83(parser) do
		parser.shift(state_51)
	end
	redef fun action_s88(parser) do
		parser.shift(state_51)
	end
	redef fun action_s89(parser) do
		parser.shift(state_51)
	end
	redef fun action_s90(parser) do
		parser.shift(state_51)
	end
	redef fun action_s115(parser) do
		parser.shift(state_51)
	end
	redef fun action_s116(parser) do
		parser.shift(state_51)
	end
	redef fun action_s117(parser) do
		parser.shift(state_51)
	end
end
redef class N_39dPrefixes_39d
	redef fun action_s28(parser) do
		parser.shift(state_52)
	end
	redef fun action_s48(parser) do
		parser.shift(state_52)
	end
	redef fun action_s54(parser) do
		parser.shift(state_52)
	end
	redef fun action_s80(parser) do
		parser.shift(state_52)
	end
	redef fun action_s81(parser) do
		parser.shift(state_52)
	end
	redef fun action_s82(parser) do
		parser.shift(state_52)
	end
	redef fun action_s83(parser) do
		parser.shift(state_52)
	end
	redef fun action_s88(parser) do
		parser.shift(state_52)
	end
	redef fun action_s89(parser) do
		parser.shift(state_52)
	end
	redef fun action_s90(parser) do
		parser.shift(state_52)
	end
	redef fun action_s115(parser) do
		parser.shift(state_52)
	end
	redef fun action_s116(parser) do
		parser.shift(state_52)
	end
	redef fun action_s117(parser) do
		parser.shift(state_52)
	end
end
redef class N_39d_46d_39d
	redef fun action_s55(parser) do
		parser.shift(state_92)
	end
	redef fun action_s92(parser) do
		parser.shift(state_122)
	end
	redef fun action_s122(parser) do
		parser.shift(state_142)
	end
end
redef class N_39dAny_39d
	redef fun action_s28(parser) do
		parser.shift(state_56)
	end
	redef fun action_s48(parser) do
		parser.shift(state_56)
	end
	redef fun action_s54(parser) do
		parser.shift(state_56)
	end
	redef fun action_s80(parser) do
		parser.shift(state_56)
	end
	redef fun action_s81(parser) do
		parser.shift(state_56)
	end
	redef fun action_s82(parser) do
		parser.shift(state_56)
	end
	redef fun action_s83(parser) do
		parser.shift(state_56)
	end
	redef fun action_s88(parser) do
		parser.shift(state_56)
	end
	redef fun action_s89(parser) do
		parser.shift(state_56)
	end
	redef fun action_s90(parser) do
		parser.shift(state_56)
	end
	redef fun action_s115(parser) do
		parser.shift(state_56)
	end
	redef fun action_s116(parser) do
		parser.shift(state_56)
	end
	redef fun action_s117(parser) do
		parser.shift(state_56)
	end
end
redef class N_39dEnd_39d
	redef fun action_s28(parser) do
		parser.shift(state_57)
	end
	redef fun action_s48(parser) do
		parser.shift(state_57)
	end
	redef fun action_s54(parser) do
		parser.shift(state_57)
	end
	redef fun action_s80(parser) do
		parser.shift(state_57)
	end
	redef fun action_s81(parser) do
		parser.shift(state_57)
	end
	redef fun action_s82(parser) do
		parser.shift(state_57)
	end
	redef fun action_s83(parser) do
		parser.shift(state_57)
	end
	redef fun action_s88(parser) do
		parser.shift(state_57)
	end
	redef fun action_s89(parser) do
		parser.shift(state_57)
	end
	redef fun action_s90(parser) do
		parser.shift(state_57)
	end
	redef fun action_s115(parser) do
		parser.shift(state_57)
	end
	redef fun action_s116(parser) do
		parser.shift(state_57)
	end
	redef fun action_s117(parser) do
		parser.shift(state_57)
	end
end
redef class Nstr
	redef fun action_s21(parser) do
		parser.shift(state_37)
	end
	redef fun action_s22(parser) do
		parser.shift(state_37)
	end
	redef fun action_s28(parser) do
		parser.shift(state_37)
	end
	redef fun action_s40(parser) do
		parser.shift(state_37)
	end
	redef fun action_s44(parser) do
		parser.shift(state_37)
	end
	redef fun action_s48(parser) do
		parser.shift(state_37)
	end
	redef fun action_s54(parser) do
		parser.shift(state_37)
	end
	redef fun action_s60(parser) do
		parser.shift(state_37)
	end
	redef fun action_s64(parser) do
		parser.shift(state_37)
	end
	redef fun action_s67(parser) do
		parser.shift(state_37)
	end
	redef fun action_s70(parser) do
		parser.shift(state_37)
	end
	redef fun action_s72(parser) do
		parser.shift(state_37)
	end
	redef fun action_s75(parser) do
		parser.shift(state_37)
	end
	redef fun action_s80(parser) do
		parser.shift(state_37)
	end
	redef fun action_s81(parser) do
		parser.shift(state_37)
	end
	redef fun action_s82(parser) do
		parser.shift(state_37)
	end
	redef fun action_s83(parser) do
		parser.shift(state_37)
	end
	redef fun action_s88(parser) do
		parser.shift(state_37)
	end
	redef fun action_s89(parser) do
		parser.shift(state_37)
	end
	redef fun action_s90(parser) do
		parser.shift(state_37)
	end
	redef fun action_s99(parser) do
		parser.shift(state_37)
	end
	redef fun action_s101(parser) do
		parser.shift(state_37)
	end
	redef fun action_s102(parser) do
		parser.shift(state_37)
	end
	redef fun action_s103(parser) do
		parser.shift(state_37)
	end
	redef fun action_s104(parser) do
		parser.shift(state_37)
	end
	redef fun action_s115(parser) do
		parser.shift(state_37)
	end
	redef fun action_s116(parser) do
		parser.shift(state_37)
	end
	redef fun action_s117(parser) do
		parser.shift(state_37)
	end
	redef fun action_s122(parser) do
		parser.shift(state_37)
	end
end
redef class Nch_dec
	redef fun action_s21(parser) do
		parser.shift(state_38)
	end
	redef fun action_s22(parser) do
		parser.shift(state_38)
	end
	redef fun action_s28(parser) do
		parser.shift(state_38)
	end
	redef fun action_s40(parser) do
		parser.shift(state_38)
	end
	redef fun action_s44(parser) do
		parser.shift(state_38)
	end
	redef fun action_s48(parser) do
		parser.shift(state_38)
	end
	redef fun action_s54(parser) do
		parser.shift(state_38)
	end
	redef fun action_s60(parser) do
		parser.shift(state_38)
	end
	redef fun action_s64(parser) do
		parser.shift(state_38)
	end
	redef fun action_s67(parser) do
		parser.shift(state_38)
	end
	redef fun action_s70(parser) do
		parser.shift(state_38)
	end
	redef fun action_s72(parser) do
		parser.shift(state_38)
	end
	redef fun action_s75(parser) do
		parser.shift(state_38)
	end
	redef fun action_s80(parser) do
		parser.shift(state_38)
	end
	redef fun action_s81(parser) do
		parser.shift(state_38)
	end
	redef fun action_s82(parser) do
		parser.shift(state_38)
	end
	redef fun action_s83(parser) do
		parser.shift(state_38)
	end
	redef fun action_s88(parser) do
		parser.shift(state_38)
	end
	redef fun action_s89(parser) do
		parser.shift(state_38)
	end
	redef fun action_s90(parser) do
		parser.shift(state_38)
	end
	redef fun action_s99(parser) do
		parser.shift(state_38)
	end
	redef fun action_s101(parser) do
		parser.shift(state_38)
	end
	redef fun action_s102(parser) do
		parser.shift(state_38)
	end
	redef fun action_s103(parser) do
		parser.shift(state_38)
	end
	redef fun action_s104(parser) do
		parser.shift(state_38)
	end
	redef fun action_s115(parser) do
		parser.shift(state_38)
	end
	redef fun action_s116(parser) do
		parser.shift(state_38)
	end
	redef fun action_s117(parser) do
		parser.shift(state_38)
	end
	redef fun action_s122(parser) do
		parser.shift(state_38)
	end
end
redef class Nch_hex
	redef fun action_s21(parser) do
		parser.shift(state_39)
	end
	redef fun action_s22(parser) do
		parser.shift(state_39)
	end
	redef fun action_s28(parser) do
		parser.shift(state_39)
	end
	redef fun action_s40(parser) do
		parser.shift(state_39)
	end
	redef fun action_s44(parser) do
		parser.shift(state_39)
	end
	redef fun action_s48(parser) do
		parser.shift(state_39)
	end
	redef fun action_s54(parser) do
		parser.shift(state_39)
	end
	redef fun action_s60(parser) do
		parser.shift(state_39)
	end
	redef fun action_s64(parser) do
		parser.shift(state_39)
	end
	redef fun action_s67(parser) do
		parser.shift(state_39)
	end
	redef fun action_s70(parser) do
		parser.shift(state_39)
	end
	redef fun action_s72(parser) do
		parser.shift(state_39)
	end
	redef fun action_s75(parser) do
		parser.shift(state_39)
	end
	redef fun action_s80(parser) do
		parser.shift(state_39)
	end
	redef fun action_s81(parser) do
		parser.shift(state_39)
	end
	redef fun action_s82(parser) do
		parser.shift(state_39)
	end
	redef fun action_s83(parser) do
		parser.shift(state_39)
	end
	redef fun action_s88(parser) do
		parser.shift(state_39)
	end
	redef fun action_s89(parser) do
		parser.shift(state_39)
	end
	redef fun action_s90(parser) do
		parser.shift(state_39)
	end
	redef fun action_s99(parser) do
		parser.shift(state_39)
	end
	redef fun action_s101(parser) do
		parser.shift(state_39)
	end
	redef fun action_s102(parser) do
		parser.shift(state_39)
	end
	redef fun action_s103(parser) do
		parser.shift(state_39)
	end
	redef fun action_s104(parser) do
		parser.shift(state_39)
	end
	redef fun action_s115(parser) do
		parser.shift(state_39)
	end
	redef fun action_s116(parser) do
		parser.shift(state_39)
	end
	redef fun action_s117(parser) do
		parser.shift(state_39)
	end
	redef fun action_s122(parser) do
		parser.shift(state_39)
	end
end
redef class N_39dParser_39d
	redef fun action_s5(parser) do
		parser.shift(state_10)
	end
	redef fun action_s6(parser) do
		parser.shift(state_10)
	end
end
redef class N_39dIgnored_39d
	redef fun action_s10(parser) do
		parser.shift(state_21)
	end
end
redef class N_39dRejected_39d
	redef fun action_s10(parser) do
		parser.shift(state_22)
	end
	redef fun action_s18(parser) do
		parser.shift(state_22)
	end
end
redef class N_39d_123d_39d
	redef fun action_s24(parser) do
		parser.shift(state_45)
	end
	redef fun action_s44(parser) do
		parser.shift(state_71)
	end
	redef fun action_s67(parser) do
		parser.shift(state_71)
	end
	redef fun action_s70(parser) do
		parser.shift(state_106)
	end
	redef fun action_s72(parser) do
		parser.shift(state_106)
	end
	redef fun action_s99(parser) do
		parser.shift(state_71)
	end
	redef fun action_s101(parser) do
		parser.shift(state_71)
	end
	redef fun action_s102(parser) do
		parser.shift(state_71)
	end
	redef fun action_s103(parser) do
		parser.shift(state_71)
	end
	redef fun action_s104(parser) do
		parser.shift(state_106)
	end
end
redef class N_39d_45d_62d_39d
	redef fun action_s45(parser) do
		parser.shift(state_78)
	end
	redef fun action_s71(parser) do
		parser.shift(state_108)
	end
	redef fun action_s106(parser) do
		parser.shift(state_108)
	end
end
redef class N_39d_125d_39d
	redef fun action_s107(parser) do
		parser.shift(state_133)
	end
	redef fun action_s108(parser) do
		parser.shift(state_134)
	end
	redef fun action_s113(parser) do
		parser.shift(state_137)
	end
	redef fun action_s132(parser) do
		parser.shift(state_144)
	end
end
redef class N_39d_58d_39d
	redef fun action_s107(parser) do
		parser.shift(state_132)
	end
	redef fun action_s112(parser) do
		parser.shift(state_135)
	end
	redef fun action_s136(parser) do
		parser.shift(state_146)
	end
end
redef class N_39d_91d_39d
	redef fun action_s44(parser) do
		parser.shift(state_76)
	end
	redef fun action_s67(parser) do
		parser.shift(state_76)
	end
	redef fun action_s70(parser) do
		parser.shift(state_76)
	end
	redef fun action_s72(parser) do
		parser.shift(state_76)
	end
	redef fun action_s99(parser) do
		parser.shift(state_76)
	end
	redef fun action_s101(parser) do
		parser.shift(state_76)
	end
	redef fun action_s102(parser) do
		parser.shift(state_76)
	end
	redef fun action_s103(parser) do
		parser.shift(state_76)
	end
	redef fun action_s104(parser) do
		parser.shift(state_76)
	end
end
redef class N_39d_93d_39d
	redef fun action_s112(parser) do
		parser.shift(state_136)
	end
	redef fun action_s135(parser) do
		parser.shift(state_145)
	end
end
redef class N_39d_44d_39d
	redef fun action_s33(parser) do
		parser.shift(state_60)
	end
	redef fun action_s42(parser) do
		parser.shift(state_60)
	end
end
redef class N_39dEmpty_39d
	redef fun action_s21(parser) do
		parser.shift(state_41)
	end
	redef fun action_s22(parser) do
		parser.shift(state_41)
	end
	redef fun action_s40(parser) do
		parser.shift(state_41)
	end
	redef fun action_s44(parser) do
		parser.shift(state_41)
	end
	redef fun action_s60(parser) do
		parser.shift(state_41)
	end
	redef fun action_s64(parser) do
		parser.shift(state_41)
	end
	redef fun action_s67(parser) do
		parser.shift(state_41)
	end
	redef fun action_s70(parser) do
		parser.shift(state_41)
	end
	redef fun action_s72(parser) do
		parser.shift(state_41)
	end
	redef fun action_s75(parser) do
		parser.shift(state_41)
	end
	redef fun action_s99(parser) do
		parser.shift(state_41)
	end
	redef fun action_s101(parser) do
		parser.shift(state_41)
	end
	redef fun action_s102(parser) do
		parser.shift(state_41)
	end
	redef fun action_s103(parser) do
		parser.shift(state_41)
	end
	redef fun action_s104(parser) do
		parser.shift(state_41)
	end
end
redef class N_39dLeft_39d
	redef fun action_s68(parser) do
		parser.shift(state_101)
	end
	redef fun action_s96(parser) do
		parser.shift(state_101)
	end
	redef fun action_s97(parser) do
		parser.shift(state_101)
	end
	redef fun action_s123(parser) do
		parser.shift(state_101)
	end
end
redef class N_39dRight_39d
	redef fun action_s68(parser) do
		parser.shift(state_102)
	end
	redef fun action_s96(parser) do
		parser.shift(state_102)
	end
	redef fun action_s97(parser) do
		parser.shift(state_102)
	end
	redef fun action_s123(parser) do
		parser.shift(state_102)
	end
end
redef class N_39dUnary_39d
	redef fun action_s68(parser) do
		parser.shift(state_103)
	end
	redef fun action_s96(parser) do
		parser.shift(state_103)
	end
	redef fun action_s97(parser) do
		parser.shift(state_103)
	end
	redef fun action_s123(parser) do
		parser.shift(state_103)
	end
end
redef class N_39dTree_39d
	redef fun action_s5(parser) do
		parser.shift(state_11)
	end
	redef fun action_s6(parser) do
		parser.shift(state_11)
	end
	redef fun action_s7(parser) do
		parser.shift(state_11)
	end
	redef fun action_s12(parser) do
		parser.shift(state_11)
	end
end
redef class NEof
	redef fun action_s1(parser) do
		parser.shift(state_3)
	end
end
redef class LRGoto
	private fun goto_s5(parser: Parser) do abort
	private fun goto_s6(parser: Parser) do abort
	private fun goto_s9(parser: Parser) do abort
	private fun goto_s10(parser: Parser) do abort
	private fun goto_s11(parser: Parser) do abort
	private fun goto_s18(parser: Parser) do abort
	private fun goto_s19(parser: Parser) do abort
	private fun goto_s21(parser: Parser) do abort
	private fun goto_s22(parser: Parser) do abort
	private fun goto_s28(parser: Parser) do abort
	private fun goto_s29(parser: Parser) do abort
	private fun goto_s40(parser: Parser) do abort
	private fun goto_s44(parser: Parser) do abort
	private fun goto_s48(parser: Parser) do abort
	private fun goto_s54(parser: Parser) do abort
	private fun goto_s60(parser: Parser) do abort
	private fun goto_s64(parser: Parser) do abort
	private fun goto_s67(parser: Parser) do abort
	private fun goto_s68(parser: Parser) do abort
	private fun goto_s70(parser: Parser) do abort
	private fun goto_s72(parser: Parser) do abort
	private fun goto_s75(parser: Parser) do abort
	private fun goto_s80(parser: Parser) do abort
	private fun goto_s81(parser: Parser) do abort
	private fun goto_s82(parser: Parser) do abort
	private fun goto_s83(parser: Parser) do abort
	private fun goto_s88(parser: Parser) do abort
	private fun goto_s89(parser: Parser) do abort
	private fun goto_s90(parser: Parser) do abort
	private fun goto_s96(parser: Parser) do abort
	private fun goto_s99(parser: Parser) do abort
	private fun goto_s101(parser: Parser) do abort
	private fun goto_s102(parser: Parser) do abort
	private fun goto_s103(parser: Parser) do abort
	private fun goto_s104(parser: Parser) do abort
	private fun goto_s115(parser: Parser) do abort
	private fun goto_s116(parser: Parser) do abort
	private fun goto_s117(parser: Parser) do abort
end
class Goto_Ngrammar
	super LRGoto
end
class Goto_Nlexer_part
	super LRGoto
	redef fun goto_s5(parser) do
		parser.push(state_6)
	end
end
class Goto_Nexpr
	super LRGoto
	redef fun goto_s9(parser) do
		parser.push(state_16)
	end
end
class Goto_Nre
	super LRGoto
	redef fun goto_s28(parser) do
		parser.push(state_46)
	end
	redef fun goto_s54(parser) do
		parser.push(state_91)
	end
	redef fun goto_s88(parser) do
		parser.push(state_118)
	end
	redef fun goto_s89(parser) do
		parser.push(state_119)
	end
	redef fun goto_s90(parser) do
		parser.push(state_120)
	end
end
class Goto_Nre1
	super LRGoto
	redef fun goto_s28(parser) do
		parser.push(state_47)
	end
	redef fun goto_s54(parser) do
		parser.push(state_47)
	end
	redef fun goto_s80(parser) do
		parser.push(state_114)
	end
	redef fun goto_s88(parser) do
		parser.push(state_47)
	end
	redef fun goto_s89(parser) do
		parser.push(state_47)
	end
	redef fun goto_s90(parser) do
		parser.push(state_47)
	end
end
class Goto_Nre2
	super LRGoto
	redef fun goto_s28(parser) do
		parser.push(state_48)
	end
	redef fun goto_s54(parser) do
		parser.push(state_48)
	end
	redef fun goto_s80(parser) do
		parser.push(state_48)
	end
	redef fun goto_s81(parser) do
		parser.push(state_115)
	end
	redef fun goto_s82(parser) do
		parser.push(state_116)
	end
	redef fun goto_s83(parser) do
		parser.push(state_117)
	end
	redef fun goto_s88(parser) do
		parser.push(state_48)
	end
	redef fun goto_s89(parser) do
		parser.push(state_48)
	end
	redef fun goto_s90(parser) do
		parser.push(state_48)
	end
end
class Goto_Nre3
	super LRGoto
	redef fun goto_s28(parser) do
		parser.push(state_49)
	end
	redef fun goto_s48(parser) do
		parser.push(state_84)
	end
	redef fun goto_s54(parser) do
		parser.push(state_49)
	end
	redef fun goto_s80(parser) do
		parser.push(state_49)
	end
	redef fun goto_s81(parser) do
		parser.push(state_49)
	end
	redef fun goto_s82(parser) do
		parser.push(state_49)
	end
	redef fun goto_s83(parser) do
		parser.push(state_49)
	end
	redef fun goto_s88(parser) do
		parser.push(state_49)
	end
	redef fun goto_s89(parser) do
		parser.push(state_49)
	end
	redef fun goto_s90(parser) do
		parser.push(state_49)
	end
	redef fun goto_s115(parser) do
		parser.push(state_84)
	end
	redef fun goto_s116(parser) do
		parser.push(state_84)
	end
	redef fun goto_s117(parser) do
		parser.push(state_84)
	end
end
class Goto_Ntext
	super LRGoto
	redef fun goto_s21(parser) do
		parser.push(state_36)
	end
	redef fun goto_s22(parser) do
		parser.push(state_36)
	end
	redef fun goto_s28(parser) do
		parser.push(state_55)
	end
	redef fun goto_s40(parser) do
		parser.push(state_36)
	end
	redef fun goto_s44(parser) do
		parser.push(state_36)
	end
	redef fun goto_s48(parser) do
		parser.push(state_55)
	end
	redef fun goto_s54(parser) do
		parser.push(state_55)
	end
	redef fun goto_s60(parser) do
		parser.push(state_36)
	end
	redef fun goto_s64(parser) do
		parser.push(state_36)
	end
	redef fun goto_s67(parser) do
		parser.push(state_36)
	end
	redef fun goto_s70(parser) do
		parser.push(state_36)
	end
	redef fun goto_s72(parser) do
		parser.push(state_36)
	end
	redef fun goto_s75(parser) do
		parser.push(state_36)
	end
	redef fun goto_s80(parser) do
		parser.push(state_55)
	end
	redef fun goto_s81(parser) do
		parser.push(state_55)
	end
	redef fun goto_s82(parser) do
		parser.push(state_55)
	end
	redef fun goto_s83(parser) do
		parser.push(state_55)
	end
	redef fun goto_s88(parser) do
		parser.push(state_55)
	end
	redef fun goto_s89(parser) do
		parser.push(state_55)
	end
	redef fun goto_s90(parser) do
		parser.push(state_55)
	end
	redef fun goto_s99(parser) do
		parser.push(state_36)
	end
	redef fun goto_s101(parser) do
		parser.push(state_36)
	end
	redef fun goto_s102(parser) do
		parser.push(state_36)
	end
	redef fun goto_s103(parser) do
		parser.push(state_36)
	end
	redef fun goto_s104(parser) do
		parser.push(state_36)
	end
	redef fun goto_s115(parser) do
		parser.push(state_55)
	end
	redef fun goto_s116(parser) do
		parser.push(state_55)
	end
	redef fun goto_s117(parser) do
		parser.push(state_55)
	end
end
class Goto_Nparser_part
	super LRGoto
	redef fun goto_s5(parser) do
		parser.push(state_7)
	end
	redef fun goto_s6(parser) do
		parser.push(state_12)
	end
end
class Goto_Nign
	super LRGoto
	redef fun goto_s10(parser) do
		parser.push(state_18)
	end
end
class Goto_Nrej
	super LRGoto
	redef fun goto_s10(parser) do
		parser.push(state_19)
	end
	redef fun goto_s18(parser) do
		parser.push(state_29)
	end
end
class Goto_Nprod
	super LRGoto
	redef fun goto_s10(parser) do
		parser.push(state_23)
	end
	redef fun goto_s11(parser) do
		parser.push(state_23)
	end
	redef fun goto_s18(parser) do
		parser.push(state_23)
	end
	redef fun goto_s19(parser) do
		parser.push(state_23)
	end
	redef fun goto_s29(parser) do
		parser.push(state_23)
	end
end
class Goto_Nptrans
	super LRGoto
end
class Goto_Natrans
	super LRGoto
	redef fun goto_s44(parser) do
		parser.push(state_77)
	end
	redef fun goto_s67(parser) do
		parser.push(state_77)
	end
	redef fun goto_s70(parser) do
		parser.push(state_105)
	end
	redef fun goto_s72(parser) do
		parser.push(state_109)
	end
	redef fun goto_s99(parser) do
		parser.push(state_77)
	end
	redef fun goto_s101(parser) do
		parser.push(state_77)
	end
	redef fun goto_s102(parser) do
		parser.push(state_77)
	end
	redef fun goto_s103(parser) do
		parser.push(state_77)
	end
	redef fun goto_s104(parser) do
		parser.push(state_131)
	end
end
class Goto_Nalts
	super LRGoto
	redef fun goto_s44(parser) do
		parser.push(state_68)
	end
	redef fun goto_s67(parser) do
		parser.push(state_96)
	end
	redef fun goto_s101(parser) do
		parser.push(state_128)
	end
	redef fun goto_s102(parser) do
		parser.push(state_129)
	end
	redef fun goto_s103(parser) do
		parser.push(state_130)
	end
end
class Goto_Nalt
	super LRGoto
	redef fun goto_s44(parser) do
		parser.push(state_69)
	end
	redef fun goto_s67(parser) do
		parser.push(state_69)
	end
	redef fun goto_s99(parser) do
		parser.push(state_127)
	end
	redef fun goto_s101(parser) do
		parser.push(state_69)
	end
	redef fun goto_s102(parser) do
		parser.push(state_69)
	end
	redef fun goto_s103(parser) do
		parser.push(state_69)
	end
end
class Goto_Naltid
	super LRGoto
	redef fun goto_s44(parser) do
		parser.push(state_70)
	end
	redef fun goto_s67(parser) do
		parser.push(state_70)
	end
	redef fun goto_s99(parser) do
		parser.push(state_70)
	end
	redef fun goto_s101(parser) do
		parser.push(state_70)
	end
	redef fun goto_s102(parser) do
		parser.push(state_70)
	end
	redef fun goto_s103(parser) do
		parser.push(state_70)
	end
end
class Goto_Nnelem
	super LRGoto
	redef fun goto_s44(parser) do
		parser.push(state_73)
	end
	redef fun goto_s67(parser) do
		parser.push(state_73)
	end
	redef fun goto_s70(parser) do
		parser.push(state_73)
	end
	redef fun goto_s72(parser) do
		parser.push(state_110)
	end
	redef fun goto_s99(parser) do
		parser.push(state_73)
	end
	redef fun goto_s101(parser) do
		parser.push(state_73)
	end
	redef fun goto_s102(parser) do
		parser.push(state_73)
	end
	redef fun goto_s103(parser) do
		parser.push(state_73)
	end
	redef fun goto_s104(parser) do
		parser.push(state_110)
	end
end
class Goto_Nelemid
	super LRGoto
	redef fun goto_s44(parser) do
		parser.push(state_75)
	end
	redef fun goto_s67(parser) do
		parser.push(state_75)
	end
	redef fun goto_s70(parser) do
		parser.push(state_75)
	end
	redef fun goto_s72(parser) do
		parser.push(state_75)
	end
	redef fun goto_s99(parser) do
		parser.push(state_75)
	end
	redef fun goto_s101(parser) do
		parser.push(state_75)
	end
	redef fun goto_s102(parser) do
		parser.push(state_75)
	end
	redef fun goto_s103(parser) do
		parser.push(state_75)
	end
	redef fun goto_s104(parser) do
		parser.push(state_75)
	end
end
class Goto_Nelem_list
	super LRGoto
	redef fun goto_s21(parser) do
		parser.push(state_33)
	end
	redef fun goto_s22(parser) do
		parser.push(state_42)
	end
end
class Goto_Nelem
	super LRGoto
	redef fun goto_s21(parser) do
		parser.push(state_34)
	end
	redef fun goto_s22(parser) do
		parser.push(state_34)
	end
	redef fun goto_s40(parser) do
		parser.push(state_65)
	end
	redef fun goto_s44(parser) do
		parser.push(state_74)
	end
	redef fun goto_s60(parser) do
		parser.push(state_93)
	end
	redef fun goto_s64(parser) do
		parser.push(state_95)
	end
	redef fun goto_s67(parser) do
		parser.push(state_74)
	end
	redef fun goto_s70(parser) do
		parser.push(state_74)
	end
	redef fun goto_s72(parser) do
		parser.push(state_74)
	end
	redef fun goto_s75(parser) do
		parser.push(state_111)
	end
	redef fun goto_s99(parser) do
		parser.push(state_74)
	end
	redef fun goto_s101(parser) do
		parser.push(state_74)
	end
	redef fun goto_s102(parser) do
		parser.push(state_74)
	end
	redef fun goto_s103(parser) do
		parser.push(state_74)
	end
	redef fun goto_s104(parser) do
		parser.push(state_74)
	end
end
class Goto_Npriority
	super LRGoto
	redef fun goto_s68(parser) do
		parser.push(state_100)
	end
	redef fun goto_s96(parser) do
		parser.push(state_100)
	end
end
class Goto_Ntree_part
	super LRGoto
	redef fun goto_s5(parser) do
		parser.push(state_8)
	end
	redef fun goto_s6(parser) do
		parser.push(state_13)
	end
end
class Goto_Nexpr_43d
	super LRGoto
	redef fun goto_s9(parser) do
		parser.push(state_15)
	end
end
class Goto_Nprod_43d
	super LRGoto
	redef fun goto_s10(parser) do
		parser.push(state_20)
	end
	redef fun goto_s11(parser) do
		parser.push(state_25)
	end
	redef fun goto_s18(parser) do
		parser.push(state_30)
	end
	redef fun goto_s19(parser) do
		parser.push(state_31)
	end
	redef fun goto_s29(parser) do
		parser.push(state_58)
	end
end
class Goto_Npriority_43d
	super LRGoto
	redef fun goto_s68(parser) do
		parser.push(state_97)
	end
	redef fun goto_s96(parser) do
		parser.push(state_123)
	end
end
class Goto_Nnelem_43d
	super LRGoto
	redef fun goto_s44(parser) do
		parser.push(state_72)
	end
	redef fun goto_s67(parser) do
		parser.push(state_72)
	end
	redef fun goto_s70(parser) do
		parser.push(state_104)
	end
	redef fun goto_s99(parser) do
		parser.push(state_72)
	end
	redef fun goto_s101(parser) do
		parser.push(state_72)
	end
	redef fun goto_s102(parser) do
		parser.push(state_72)
	end
	redef fun goto_s103(parser) do
		parser.push(state_72)
	end
end
class Goto_Nelem_43d
	super LRGoto
	redef fun goto_s40(parser) do
		parser.push(state_64)
	end
end
class Goto_N_start
	super LRGoto
end
# State 0 
private class LRState0
	super LRState
	redef fun to_s do return "0 "
	redef fun error_msg do return "grammar"
	redef fun action(parser) do
		parser.peek_token.action_s0(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_1)
	end
end
# State 1 grammar
private class LRState1
	super LRState
	redef fun to_s do return "1 grammar"
	redef fun error_msg do return "Eof"
	redef fun action(parser) do
		parser.peek_token.action_s1(parser)
	end
end
# State 2 'Grammar'
private class LRState2
	super LRState
	redef fun to_s do return "2 \'Grammar\'"
	redef fun error_msg do return "id"
	redef fun action(parser) do
		parser.peek_token.action_s2(parser)
	end
end
# State 3 grammar Eof
private class LRState3
	super LRState
	redef fun to_s do return "3 grammar Eof"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_NStart(parser)
	end
end
# State 4 'Grammar' id
private class LRState4
	super LRState
	redef fun to_s do return "4 \'Grammar\' id"
	redef fun error_msg do return "\';\'"
	redef fun action(parser) do
		parser.peek_token.action_s4(parser)
	end
end
# State 5 'Grammar' id ';'
private class LRState5
	super LRState
	redef fun to_s do return "5 \'Grammar\' id \';\'"
	redef fun error_msg do return "lexer_part, parser_part, tree_part"
	redef fun action(parser) do
		parser.peek_token.action_s5(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s5(parser)
	end
end
# State 6 'Grammar' id ';' lexer_part
private class LRState6
	super LRState
	redef fun to_s do return "6 \'Grammar\' id \';\' lexer_part"
	redef fun error_msg do return "parser_part, tree_part"
	redef fun action(parser) do
		parser.peek_token.action_s6(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s6(parser)
	end
end
# State 7 'Grammar' id ';' parser_part
private class LRState7
	super LRState
	redef fun to_s do return "7 \'Grammar\' id \';\' parser_part"
	redef fun error_msg do return "tree_part"
	redef fun action(parser) do
		parser.peek_token.action_s7(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_14)
	end
end
# State 8 'Grammar' id ';' tree_part
private class LRState8
	super LRState
	redef fun to_s do return "8 \'Grammar\' id \';\' tree_part"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Ngrammar_95d3(parser)
	end
end
# State 9 'Grammar' id ';' 'Lexer'
private class LRState9
	super LRState
	redef fun to_s do return "9 \'Grammar\' id \';\' \'Lexer\'"
	redef fun error_msg do return "expr+, expr"
	redef fun action(parser) do
		parser.peek_token.action_s9(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s9(parser)
	end
end
# State 10 'Grammar' id ';' 'Parser'
private class LRState10
	super LRState
	redef fun to_s do return "10 \'Grammar\' id \';\' \'Parser\'"
	redef fun error_msg do return "ign, rej, prod+, prod"
	redef fun action(parser) do
		parser.peek_token.action_s10(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s10(parser)
	end
end
# State 11 'Grammar' id ';' 'Tree'
private class LRState11
	super LRState
	redef fun to_s do return "11 \'Grammar\' id \';\' \'Tree\'"
	redef fun error_msg do return "prod+, prod"
	redef fun action(parser) do
		parser.peek_token.action_s11(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s11(parser)
	end
end
# State 12 'Grammar' id ';' lexer_part parser_part
private class LRState12
	super LRState
	redef fun to_s do return "12 \'Grammar\' id \';\' lexer_part parser_part"
	redef fun error_msg do return "tree_part"
	redef fun action(parser) do
		parser.peek_token.action_s12(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_26)
	end
end
# State 13 'Grammar' id ';' lexer_part tree_part
private class LRState13
	super LRState
	redef fun to_s do return "13 \'Grammar\' id \';\' lexer_part tree_part"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Ngrammar_95d2(parser)
	end
end
# State 14 'Grammar' id ';' parser_part tree_part
private class LRState14
	super LRState
	redef fun to_s do return "14 \'Grammar\' id \';\' parser_part tree_part"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Ngrammar_95d1(parser)
	end
end
# State 15 'Grammar' id ';' 'Lexer' expr+
private class LRState15
	super LRState
	redef fun to_s do return "15 \'Grammar\' id \';\' \'Lexer\' expr+"
	redef fun error_msg do return "expr"
	redef fun action(parser) do
		parser.peek_token.action_s15(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_27)
	end
end
# State 16 'Grammar' id ';' 'Lexer' expr
private class LRState16
	super LRState
	redef fun to_s do return "16 \'Grammar\' id \';\' \'Lexer\' expr"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nexpr_43d_one(parser)
	end
end
# State 17 'Grammar' id ';' 'Lexer' id
private class LRState17
	super LRState
	redef fun to_s do return "17 \'Grammar\' id \';\' \'Lexer\' id"
	redef fun error_msg do return "\'=\'"
	redef fun action(parser) do
		parser.peek_token.action_s17(parser)
	end
end
# State 18 'Grammar' id ';' 'Parser' ign
private class LRState18
	super LRState
	redef fun to_s do return "18 \'Grammar\' id \';\' \'Parser\' ign"
	redef fun error_msg do return "rej, prod+, prod"
	redef fun action(parser) do
		parser.peek_token.action_s18(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s18(parser)
	end
end
# State 19 'Grammar' id ';' 'Parser' rej
private class LRState19
	super LRState
	redef fun to_s do return "19 \'Grammar\' id \';\' \'Parser\' rej"
	redef fun error_msg do return "prod+, prod"
	redef fun action(parser) do
		parser.peek_token.action_s19(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s19(parser)
	end
end
# State 20 'Grammar' id ';' 'Parser' prod+
private class LRState20
	super LRState
	redef fun to_s do return "20 \'Grammar\' id \';\' \'Parser\' prod+"
	redef fun error_msg do return "prod"
	redef fun action(parser) do
		parser.peek_token.action_s20(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_32)
	end
end
# State 21 'Grammar' id ';' 'Parser' 'Ignored'
private class LRState21
	super LRState
	redef fun to_s do return "21 \'Grammar\' id \';\' \'Parser\' \'Ignored\'"
	redef fun error_msg do return "elem_list, elem, text"
	redef fun action(parser) do
		parser.peek_token.action_s21(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s21(parser)
	end
end
# State 22 'Grammar' id ';' 'Parser' 'Rejected'
private class LRState22
	super LRState
	redef fun to_s do return "22 \'Grammar\' id \';\' \'Parser\' \'Rejected\'"
	redef fun error_msg do return "elem_list, elem, text"
	redef fun action(parser) do
		parser.peek_token.action_s22(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s22(parser)
	end
end
# State 23 'Grammar' id ';' 'Parser' prod
private class LRState23
	super LRState
	redef fun to_s do return "23 \'Grammar\' id \';\' \'Parser\' prod"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nprod_43d_one(parser)
	end
end
# State 24 'Grammar' id ';' 'Parser' id
private class LRState24
	super LRState
	redef fun to_s do return "24 \'Grammar\' id \';\' \'Parser\' id"
	redef fun error_msg do return "ptrans"
	redef fun action(parser) do
		parser.peek_token.action_s24(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_43)
	end
end
# State 25 'Grammar' id ';' 'Tree' prod+
private class LRState25
	super LRState
	redef fun to_s do return "25 \'Grammar\' id \';\' \'Tree\' prod+"
	redef fun error_msg do return "prod"
	redef fun action(parser) do
		parser.peek_token.action_s25(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_32)
	end
end
# State 26 'Grammar' id ';' lexer_part parser_part tree_part
private class LRState26
	super LRState
	redef fun to_s do return "26 \'Grammar\' id \';\' lexer_part parser_part tree_part"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Ngrammar_95d0(parser)
	end
end
# State 27 'Grammar' id ';' 'Lexer' expr+ expr
private class LRState27
	super LRState
	redef fun to_s do return "27 \'Grammar\' id \';\' \'Lexer\' expr+ expr"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nexpr_43d_more(parser)
	end
end
# State 28 'Grammar' id ';' 'Lexer' id '='
private class LRState28
	super LRState
	redef fun to_s do return "28 \'Grammar\' id \';\' \'Lexer\' id \'=\'"
	redef fun error_msg do return "re, re1, re2, re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s28(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s28(parser)
	end
end
# State 29 'Grammar' id ';' 'Parser' ign rej
private class LRState29
	super LRState
	redef fun to_s do return "29 \'Grammar\' id \';\' \'Parser\' ign rej"
	redef fun error_msg do return "prod+, prod"
	redef fun action(parser) do
		parser.peek_token.action_s29(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s29(parser)
	end
end
# State 30 'Grammar' id ';' 'Parser' ign prod+
private class LRState30
	super LRState
	redef fun to_s do return "30 \'Grammar\' id \';\' \'Parser\' ign prod+"
	redef fun error_msg do return "prod"
	redef fun action(parser) do
		parser.peek_token.action_s30(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_32)
	end
end
# State 31 'Grammar' id ';' 'Parser' rej prod+
private class LRState31
	super LRState
	redef fun to_s do return "31 \'Grammar\' id \';\' \'Parser\' rej prod+"
	redef fun error_msg do return "prod"
	redef fun action(parser) do
		parser.peek_token.action_s31(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_32)
	end
end
# State 32 'Grammar' id ';' 'Parser' prod+ prod
private class LRState32
	super LRState
	redef fun to_s do return "32 \'Grammar\' id \';\' \'Parser\' prod+ prod"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nprod_43d_more(parser)
	end
end
# State 33 'Grammar' id ';' 'Parser' 'Ignored' elem_list
private class LRState33
	super LRState
	redef fun to_s do return "33 \'Grammar\' id \';\' \'Parser\' \'Ignored\' elem_list"
	redef fun error_msg do return "\';\', \',\'"
	redef fun action(parser) do
		parser.peek_token.action_s33(parser)
	end
end
# State 34 'Grammar' id ';' 'Parser' 'Ignored' elem
private class LRState34
	super LRState
	redef fun to_s do return "34 \'Grammar\' id \';\' \'Parser\' \'Ignored\' elem"
	redef fun error_msg do return "\'*\', \'?\', \'+\'"
	redef fun action(parser) do
		parser.peek_token.action_s34(parser)
	end
end
# State 35 'Grammar' id ';' 'Parser' 'Ignored' id
private class LRState35
	super LRState
	redef fun to_s do return "35 \'Grammar\' id \';\' \'Parser\' \'Ignored\' id"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nelem_id(parser)
	end
end
# State 36 'Grammar' id ';' 'Parser' 'Ignored' text
private class LRState36
	super LRState
	redef fun to_s do return "36 \'Grammar\' id \';\' \'Parser\' \'Ignored\' text"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nelem_str(parser)
	end
end
# State 37 'Grammar' id ';' 'Parser' 'Ignored' str
private class LRState37
	super LRState
	redef fun to_s do return "37 \'Grammar\' id \';\' \'Parser\' \'Ignored\' str"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_str(parser)
	end
end
# State 38 'Grammar' id ';' 'Parser' 'Ignored' ch_dec
private class LRState38
	super LRState
	redef fun to_s do return "38 \'Grammar\' id \';\' \'Parser\' \'Ignored\' ch_dec"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_ch_dec(parser)
	end
end
# State 39 'Grammar' id ';' 'Parser' 'Ignored' ch_hex
private class LRState39
	super LRState
	redef fun to_s do return "39 \'Grammar\' id \';\' \'Parser\' \'Ignored\' ch_hex"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_ch_hex(parser)
	end
end
# State 40 'Grammar' id ';' 'Parser' 'Ignored' '('
private class LRState40
	super LRState
	redef fun to_s do return "40 \'Grammar\' id \';\' \'Parser\' \'Ignored\' \'(\'"
	redef fun error_msg do return "elem+, elem, text"
	redef fun action(parser) do
		parser.peek_token.action_s40(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s40(parser)
	end
end
# State 41 'Grammar' id ';' 'Parser' 'Ignored' 'Empty'
private class LRState41
	super LRState
	redef fun to_s do return "41 \'Grammar\' id \';\' \'Parser\' \'Ignored\' \'Empty\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nelem_empty(parser)
	end
end
# State 42 'Grammar' id ';' 'Parser' 'Rejected' elem_list
private class LRState42
	super LRState
	redef fun to_s do return "42 \'Grammar\' id \';\' \'Parser\' \'Rejected\' elem_list"
	redef fun error_msg do return "\';\', \',\'"
	redef fun action(parser) do
		parser.peek_token.action_s42(parser)
	end
end
# State 43 'Grammar' id ';' 'Parser' id ptrans
private class LRState43
	super LRState
	redef fun to_s do return "43 \'Grammar\' id \';\' \'Parser\' id ptrans"
	redef fun error_msg do return "\'=\'"
	redef fun action(parser) do
		parser.peek_token.action_s43(parser)
	end
end
# State 44 'Grammar' id ';' 'Parser' id '='
private class LRState44
	super LRState
	redef fun to_s do return "44 \'Grammar\' id \';\' \'Parser\' id \'=\'"
	redef fun error_msg do return "alts, alt, altid, nelem+, nelem, elem, text, elemid, atrans"
	redef fun action(parser) do
		parser.peek_token.action_s44(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s44(parser)
	end
end
# State 45 'Grammar' id ';' 'Parser' id '{'
private class LRState45
	super LRState
	redef fun to_s do return "45 \'Grammar\' id \';\' \'Parser\' id \'\{\'"
	redef fun error_msg do return "\'->\'"
	redef fun action(parser) do
		parser.peek_token.action_s45(parser)
	end
end
# State 46 'Grammar' id ';' 'Lexer' id '=' re
private class LRState46
	super LRState
	redef fun to_s do return "46 \'Grammar\' id \';\' \'Lexer\' id \'=\' re"
	redef fun error_msg do return "\';\', \'|\'"
	redef fun action(parser) do
		parser.peek_token.action_s46(parser)
	end
end
# State 47 'Grammar' id ';' 'Lexer' id '=' re1
private class LRState47
	super LRState
	redef fun to_s do return "47 \'Grammar\' id \';\' \'Lexer\' id \'=\' re1"
	redef fun error_msg do return "\'-\', \'Except\', \'And\'"
	redef fun action(parser) do
		parser.peek_token.action_s47(parser)
	end
end
# State 48 'Grammar' id ';' 'Lexer' id '=' re2
private class LRState48
	super LRState
	redef fun to_s do return "48 \'Grammar\' id \';\' \'Lexer\' id \'=\' re2"
	redef fun error_msg do return "re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s48(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s48(parser)
	end
end
# State 49 'Grammar' id ';' 'Lexer' id '=' re3
private class LRState49
	super LRState
	redef fun to_s do return "49 \'Grammar\' id \';\' \'Lexer\' id \'=\' re3"
	redef fun error_msg do return "\'?\', \'*\', \'+\'"
	redef fun action(parser) do
		parser.peek_token.action_s49(parser)
	end
end
# State 50 'Grammar' id ';' 'Lexer' id '=' 'Shortest'
private class LRState50
	super LRState
	redef fun to_s do return "50 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Shortest\'"
	redef fun error_msg do return "\'(\'"
	redef fun action(parser) do
		parser.peek_token.action_s50(parser)
	end
end
# State 51 'Grammar' id ';' 'Lexer' id '=' 'Longest'
private class LRState51
	super LRState
	redef fun to_s do return "51 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Longest\'"
	redef fun error_msg do return "\'(\'"
	redef fun action(parser) do
		parser.peek_token.action_s51(parser)
	end
end
# State 52 'Grammar' id ';' 'Lexer' id '=' 'Prefixes'
private class LRState52
	super LRState
	redef fun to_s do return "52 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Prefixes\'"
	redef fun error_msg do return "\'(\'"
	redef fun action(parser) do
		parser.peek_token.action_s52(parser)
	end
end
# State 53 'Grammar' id ';' 'Lexer' id '=' id
private class LRState53
	super LRState
	redef fun to_s do return "53 \'Grammar\' id \';\' \'Lexer\' id \'=\' id"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_id(parser)
	end
end
# State 54 'Grammar' id ';' 'Lexer' id '=' '('
private class LRState54
	super LRState
	redef fun to_s do return "54 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'(\'"
	redef fun error_msg do return "re, re1, re2, re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s54(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s54(parser)
	end
end
# State 55 'Grammar' id ';' 'Lexer' id '=' text
private class LRState55
	super LRState
	redef fun to_s do return "55 \'Grammar\' id \';\' \'Lexer\' id \'=\' text"
	redef fun error_msg do return "\'.\'"
	redef fun action(parser) do
		parser.peek_token.action_s55(parser)
	end
end
# State 56 'Grammar' id ';' 'Lexer' id '=' 'Any'
private class LRState56
	super LRState
	redef fun to_s do return "56 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Any\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_any(parser)
	end
end
# State 57 'Grammar' id ';' 'Lexer' id '=' 'End'
private class LRState57
	super LRState
	redef fun to_s do return "57 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'End\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_end(parser)
	end
end
# State 58 'Grammar' id ';' 'Parser' ign rej prod+
private class LRState58
	super LRState
	redef fun to_s do return "58 \'Grammar\' id \';\' \'Parser\' ign rej prod+"
	redef fun error_msg do return "prod"
	redef fun action(parser) do
		parser.peek_token.action_s58(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_32)
	end
end
# State 59 'Grammar' id ';' 'Parser' 'Ignored' elem_list ';'
private class LRState59
	super LRState
	redef fun to_s do return "59 \'Grammar\' id \';\' \'Parser\' \'Ignored\' elem_list \';\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nign(parser)
	end
end
# State 60 'Grammar' id ';' 'Parser' 'Ignored' elem_list ','
private class LRState60
	super LRState
	redef fun to_s do return "60 \'Grammar\' id \';\' \'Parser\' \'Ignored\' elem_list \',\'"
	redef fun error_msg do return "elem, text"
	redef fun action(parser) do
		parser.peek_token.action_s60(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s60(parser)
	end
end
# State 61 'Grammar' id ';' 'Parser' 'Ignored' elem '*'
private class LRState61
	super LRState
	redef fun to_s do return "61 \'Grammar\' id \';\' \'Parser\' \'Ignored\' elem \'*\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nelem_star(parser)
	end
end
# State 62 'Grammar' id ';' 'Parser' 'Ignored' elem '?'
private class LRState62
	super LRState
	redef fun to_s do return "62 \'Grammar\' id \';\' \'Parser\' \'Ignored\' elem \'?\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nelem_ques(parser)
	end
end
# State 63 'Grammar' id ';' 'Parser' 'Ignored' elem '+'
private class LRState63
	super LRState
	redef fun to_s do return "63 \'Grammar\' id \';\' \'Parser\' \'Ignored\' elem \'+\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nelem_plus(parser)
	end
end
# State 64 'Grammar' id ';' 'Parser' 'Ignored' '(' elem+
private class LRState64
	super LRState
	redef fun to_s do return "64 \'Grammar\' id \';\' \'Parser\' \'Ignored\' \'(\' elem+"
	redef fun error_msg do return "elem, text"
	redef fun action(parser) do
		parser.peek_token.action_s64(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s64(parser)
	end
end
# State 65 'Grammar' id ';' 'Parser' 'Ignored' '(' elem
private class LRState65
	super LRState
	redef fun to_s do return "65 \'Grammar\' id \';\' \'Parser\' \'Ignored\' \'(\' elem"
	redef fun error_msg do return "\'*\', \'?\', \'+\'"
	redef fun action(parser) do
		parser.peek_token.action_s65(parser)
	end
end
# State 66 'Grammar' id ';' 'Parser' 'Rejected' elem_list ';'
private class LRState66
	super LRState
	redef fun to_s do return "66 \'Grammar\' id \';\' \'Parser\' \'Rejected\' elem_list \';\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nrej(parser)
	end
end
# State 67 'Grammar' id ';' 'Parser' id ptrans '='
private class LRState67
	super LRState
	redef fun to_s do return "67 \'Grammar\' id \';\' \'Parser\' id ptrans \'=\'"
	redef fun error_msg do return "alts, alt, altid, nelem+, nelem, elem, text, elemid, atrans"
	redef fun action(parser) do
		parser.peek_token.action_s67(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s67(parser)
	end
end
# State 68 'Grammar' id ';' 'Parser' id '=' alts
private class LRState68
	super LRState
	redef fun to_s do return "68 \'Grammar\' id \';\' \'Parser\' id \'=\' alts"
	redef fun error_msg do return "priority+, priority"
	redef fun action(parser) do
		parser.peek_token.action_s68(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s68(parser)
	end
end
# State 69 'Grammar' id ';' 'Parser' id '=' alt
private class LRState69
	super LRState
	redef fun to_s do return "69 \'Grammar\' id \';\' \'Parser\' id \'=\' alt"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nalts_one(parser)
	end
end
# State 70 'Grammar' id ';' 'Parser' id '=' altid
private class LRState70
	super LRState
	redef fun to_s do return "70 \'Grammar\' id \';\' \'Parser\' id \'=\' altid"
	redef fun error_msg do return "nelem+, atrans, nelem, elem, text, elemid"
	redef fun action(parser) do
		parser.peek_token.action_s70(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s70(parser)
	end
end
# State 71 'Grammar' id ';' 'Parser' id '=' '{'
private class LRState71
	super LRState
	redef fun to_s do return "71 \'Grammar\' id \';\' \'Parser\' id \'=\' \'\{\'"
	redef fun error_msg do return "id, \'->\'"
	redef fun action(parser) do
		parser.peek_token.action_s71(parser)
	end
end
# State 72 'Grammar' id ';' 'Parser' id '=' nelem+
private class LRState72
	super LRState
	redef fun to_s do return "72 \'Grammar\' id \';\' \'Parser\' id \'=\' nelem+"
	redef fun error_msg do return "atrans, nelem, elem, text, elemid"
	redef fun action(parser) do
		parser.peek_token.action_s72(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s72(parser)
	end
end
# State 73 'Grammar' id ';' 'Parser' id '=' nelem
private class LRState73
	super LRState
	redef fun to_s do return "73 \'Grammar\' id \';\' \'Parser\' id \'=\' nelem"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nnelem_43d_one(parser)
	end
end
# State 74 'Grammar' id ';' 'Parser' id '=' elem
private class LRState74
	super LRState
	redef fun to_s do return "74 \'Grammar\' id \';\' \'Parser\' id \'=\' elem"
	redef fun error_msg do return "\'*\', \'?\', \'+\'"
	redef fun action(parser) do
		parser.peek_token.action_s74(parser)
	end
end
# State 75 'Grammar' id ';' 'Parser' id '=' elemid
private class LRState75
	super LRState
	redef fun to_s do return "75 \'Grammar\' id \';\' \'Parser\' id \'=\' elemid"
	redef fun error_msg do return "elem, text"
	redef fun action(parser) do
		parser.peek_token.action_s75(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s75(parser)
	end
end
# State 76 'Grammar' id ';' 'Parser' id '=' '['
private class LRState76
	super LRState
	redef fun to_s do return "76 \'Grammar\' id \';\' \'Parser\' id \'=\' \'[\'"
	redef fun error_msg do return "id"
	redef fun action(parser) do
		parser.peek_token.action_s76(parser)
	end
end
# State 77 'Grammar' id ';' 'Parser' id '=' atrans
private class LRState77
	super LRState
	redef fun to_s do return "77 \'Grammar\' id \';\' \'Parser\' id \'=\' atrans"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nalt_95d3(parser)
	end
end
# State 78 'Grammar' id ';' 'Parser' id '{' '->'
private class LRState78
	super LRState
	redef fun to_s do return "78 \'Grammar\' id \';\' \'Parser\' id \'\{\' \'->\'"
	redef fun error_msg do return "id"
	redef fun action(parser) do
		parser.peek_token.action_s78(parser)
	end
end
# State 79 'Grammar' id ';' 'Lexer' id '=' re ';'
private class LRState79
	super LRState
	redef fun to_s do return "79 \'Grammar\' id \';\' \'Lexer\' id \'=\' re \';\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nexpr(parser)
	end
end
# State 80 'Grammar' id ';' 'Lexer' id '=' re '|'
private class LRState80
	super LRState
	redef fun to_s do return "80 \'Grammar\' id \';\' \'Lexer\' id \'=\' re \'|\'"
	redef fun error_msg do return "re1, re2, re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s80(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s80(parser)
	end
end
# State 81 'Grammar' id ';' 'Lexer' id '=' re1 '-'
private class LRState81
	super LRState
	redef fun to_s do return "81 \'Grammar\' id \';\' \'Lexer\' id \'=\' re1 \'-\'"
	redef fun error_msg do return "re2, re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s81(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s81(parser)
	end
end
# State 82 'Grammar' id ';' 'Lexer' id '=' re1 'Except'
private class LRState82
	super LRState
	redef fun to_s do return "82 \'Grammar\' id \';\' \'Lexer\' id \'=\' re1 \'Except\'"
	redef fun error_msg do return "re2, re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s82(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s82(parser)
	end
end
# State 83 'Grammar' id ';' 'Lexer' id '=' re1 'And'
private class LRState83
	super LRState
	redef fun to_s do return "83 \'Grammar\' id \';\' \'Lexer\' id \'=\' re1 \'And\'"
	redef fun error_msg do return "re2, re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s83(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s83(parser)
	end
end
# State 84 'Grammar' id ';' 'Lexer' id '=' re2 re3
private class LRState84
	super LRState
	redef fun to_s do return "84 \'Grammar\' id \';\' \'Lexer\' id \'=\' re2 re3"
	redef fun error_msg do return "\'?\', \'*\', \'+\'"
	redef fun action(parser) do
		parser.peek_token.action_s84(parser)
	end
end
# State 85 'Grammar' id ';' 'Lexer' id '=' re3 '?'
private class LRState85
	super LRState
	redef fun to_s do return "85 \'Grammar\' id \';\' \'Lexer\' id \'=\' re3 \'?\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_ques(parser)
	end
end
# State 86 'Grammar' id ';' 'Lexer' id '=' re3 '*'
private class LRState86
	super LRState
	redef fun to_s do return "86 \'Grammar\' id \';\' \'Lexer\' id \'=\' re3 \'*\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_star(parser)
	end
end
# State 87 'Grammar' id ';' 'Lexer' id '=' re3 '+'
private class LRState87
	super LRState
	redef fun to_s do return "87 \'Grammar\' id \';\' \'Lexer\' id \'=\' re3 \'+\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_plus(parser)
	end
end
# State 88 'Grammar' id ';' 'Lexer' id '=' 'Shortest' '('
private class LRState88
	super LRState
	redef fun to_s do return "88 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Shortest\' \'(\'"
	redef fun error_msg do return "re, re1, re2, re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s88(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s88(parser)
	end
end
# State 89 'Grammar' id ';' 'Lexer' id '=' 'Longest' '('
private class LRState89
	super LRState
	redef fun to_s do return "89 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Longest\' \'(\'"
	redef fun error_msg do return "re, re1, re2, re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s89(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s89(parser)
	end
end
# State 90 'Grammar' id ';' 'Lexer' id '=' 'Prefixes' '('
private class LRState90
	super LRState
	redef fun to_s do return "90 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Prefixes\' \'(\'"
	redef fun error_msg do return "re, re1, re2, re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s90(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s90(parser)
	end
end
# State 91 'Grammar' id ';' 'Lexer' id '=' '(' re
private class LRState91
	super LRState
	redef fun to_s do return "91 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'(\' re"
	redef fun error_msg do return "\')\', \'|\'"
	redef fun action(parser) do
		parser.peek_token.action_s91(parser)
	end
end
# State 92 'Grammar' id ';' 'Lexer' id '=' text '.'
private class LRState92
	super LRState
	redef fun to_s do return "92 \'Grammar\' id \';\' \'Lexer\' id \'=\' text \'.\'"
	redef fun error_msg do return "\'.\'"
	redef fun action(parser) do
		parser.peek_token.action_s92(parser)
	end
end
# State 93 'Grammar' id ';' 'Parser' 'Ignored' elem_list ',' elem
private class LRState93
	super LRState
	redef fun to_s do return "93 \'Grammar\' id \';\' \'Parser\' \'Ignored\' elem_list \',\' elem"
	redef fun error_msg do return "\'*\', \'?\', \'+\'"
	redef fun action(parser) do
		parser.peek_token.action_s93(parser)
	end
end
# State 94 'Grammar' id ';' 'Parser' 'Ignored' '(' elem+ ')'
private class LRState94
	super LRState
	redef fun to_s do return "94 \'Grammar\' id \';\' \'Parser\' \'Ignored\' \'(\' elem+ \')\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nelem_par(parser)
	end
end
# State 95 'Grammar' id ';' 'Parser' 'Ignored' '(' elem+ elem
private class LRState95
	super LRState
	redef fun to_s do return "95 \'Grammar\' id \';\' \'Parser\' \'Ignored\' \'(\' elem+ elem"
	redef fun error_msg do return "\'*\', \'?\', \'+\'"
	redef fun action(parser) do
		parser.peek_token.action_s95(parser)
	end
end
# State 96 'Grammar' id ';' 'Parser' id ptrans '=' alts
private class LRState96
	super LRState
	redef fun to_s do return "96 \'Grammar\' id \';\' \'Parser\' id ptrans \'=\' alts"
	redef fun error_msg do return "priority+, priority"
	redef fun action(parser) do
		parser.peek_token.action_s96(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s96(parser)
	end
end
# State 97 'Grammar' id ';' 'Parser' id '=' alts priority+
private class LRState97
	super LRState
	redef fun to_s do return "97 \'Grammar\' id \';\' \'Parser\' id \'=\' alts priority+"
	redef fun error_msg do return "priority"
	redef fun action(parser) do
		parser.peek_token.action_s97(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_126)
	end
end
# State 98 'Grammar' id ';' 'Parser' id '=' alts ';'
private class LRState98
	super LRState
	redef fun to_s do return "98 \'Grammar\' id \';\' \'Parser\' id \'=\' alts \';\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nprod_95d3(parser)
	end
end
# State 99 'Grammar' id ';' 'Parser' id '=' alts '|'
private class LRState99
	super LRState
	redef fun to_s do return "99 \'Grammar\' id \';\' \'Parser\' id \'=\' alts \'|\'"
	redef fun error_msg do return "alt, altid, nelem+, nelem, elem, text, elemid, atrans"
	redef fun action(parser) do
		parser.peek_token.action_s99(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s99(parser)
	end
end
# State 100 'Grammar' id ';' 'Parser' id '=' alts priority
private class LRState100
	super LRState
	redef fun to_s do return "100 \'Grammar\' id \';\' \'Parser\' id \'=\' alts priority"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Npriority_43d_one(parser)
	end
end
# State 101 'Grammar' id ';' 'Parser' id '=' alts 'Left'
private class LRState101
	super LRState
	redef fun to_s do return "101 \'Grammar\' id \';\' \'Parser\' id \'=\' alts \'Left\'"
	redef fun error_msg do return "alts, alt, altid, nelem+, nelem, elem, text, elemid, atrans"
	redef fun action(parser) do
		parser.peek_token.action_s101(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s101(parser)
	end
end
# State 102 'Grammar' id ';' 'Parser' id '=' alts 'Right'
private class LRState102
	super LRState
	redef fun to_s do return "102 \'Grammar\' id \';\' \'Parser\' id \'=\' alts \'Right\'"
	redef fun error_msg do return "alts, alt, altid, nelem+, nelem, elem, text, elemid, atrans"
	redef fun action(parser) do
		parser.peek_token.action_s102(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s102(parser)
	end
end
# State 103 'Grammar' id ';' 'Parser' id '=' alts 'Unary'
private class LRState103
	super LRState
	redef fun to_s do return "103 \'Grammar\' id \';\' \'Parser\' id \'=\' alts \'Unary\'"
	redef fun error_msg do return "alts, alt, altid, nelem+, nelem, elem, text, elemid, atrans"
	redef fun action(parser) do
		parser.peek_token.action_s103(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s103(parser)
	end
end
# State 104 'Grammar' id ';' 'Parser' id '=' altid nelem+
private class LRState104
	super LRState
	redef fun to_s do return "104 \'Grammar\' id \';\' \'Parser\' id \'=\' altid nelem+"
	redef fun error_msg do return "atrans, nelem, elem, text, elemid"
	redef fun action(parser) do
		parser.peek_token.action_s104(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s104(parser)
	end
end
# State 105 'Grammar' id ';' 'Parser' id '=' altid atrans
private class LRState105
	super LRState
	redef fun to_s do return "105 \'Grammar\' id \';\' \'Parser\' id \'=\' altid atrans"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nalt_95d2(parser)
	end
end
# State 106 'Grammar' id ';' 'Parser' id '=' altid '{'
private class LRState106
	super LRState
	redef fun to_s do return "106 \'Grammar\' id \';\' \'Parser\' id \'=\' altid \'\{\'"
	redef fun error_msg do return "\'->\'"
	redef fun action(parser) do
		parser.peek_token.action_s106(parser)
	end
end
# State 107 'Grammar' id ';' 'Parser' id '=' '{' id
private class LRState107
	super LRState
	redef fun to_s do return "107 \'Grammar\' id \';\' \'Parser\' id \'=\' \'\{\' id"
	redef fun error_msg do return "\':\', \'\}\'"
	redef fun action(parser) do
		parser.peek_token.action_s107(parser)
	end
end
# State 108 'Grammar' id ';' 'Parser' id '=' '{' '->'
private class LRState108
	super LRState
	redef fun to_s do return "108 \'Grammar\' id \';\' \'Parser\' id \'=\' \'\{\' \'->\'"
	redef fun error_msg do return "\'\}\'"
	redef fun action(parser) do
		parser.peek_token.action_s108(parser)
	end
end
# State 109 'Grammar' id ';' 'Parser' id '=' nelem+ atrans
private class LRState109
	super LRState
	redef fun to_s do return "109 \'Grammar\' id \';\' \'Parser\' id \'=\' nelem+ atrans"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nalt_95d1(parser)
	end
end
# State 110 'Grammar' id ';' 'Parser' id '=' nelem+ nelem
private class LRState110
	super LRState
	redef fun to_s do return "110 \'Grammar\' id \';\' \'Parser\' id \'=\' nelem+ nelem"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nnelem_43d_more(parser)
	end
end
# State 111 'Grammar' id ';' 'Parser' id '=' elemid elem
private class LRState111
	super LRState
	redef fun to_s do return "111 \'Grammar\' id \';\' \'Parser\' id \'=\' elemid elem"
	redef fun error_msg do return "\'*\', \'?\', \'+\'"
	redef fun action(parser) do
		parser.peek_token.action_s111(parser)
	end
end
# State 112 'Grammar' id ';' 'Parser' id '=' '[' id
private class LRState112
	super LRState
	redef fun to_s do return "112 \'Grammar\' id \';\' \'Parser\' id \'=\' \'[\' id"
	redef fun error_msg do return "\':\', \']\'"
	redef fun action(parser) do
		parser.peek_token.action_s112(parser)
	end
end
# State 113 'Grammar' id ';' 'Parser' id '{' '->' id
private class LRState113
	super LRState
	redef fun to_s do return "113 \'Grammar\' id \';\' \'Parser\' id \'\{\' \'->\' id"
	redef fun error_msg do return "\'\}\'"
	redef fun action(parser) do
		parser.peek_token.action_s113(parser)
	end
end
# State 114 'Grammar' id ';' 'Lexer' id '=' re '|' re1
private class LRState114
	super LRState
	redef fun to_s do return "114 \'Grammar\' id \';\' \'Lexer\' id \'=\' re \'|\' re1"
	redef fun error_msg do return "\'-\', \'Except\', \'And\'"
	redef fun action(parser) do
		parser.peek_token.action_s114(parser)
	end
end
# State 115 'Grammar' id ';' 'Lexer' id '=' re1 '-' re2
private class LRState115
	super LRState
	redef fun to_s do return "115 \'Grammar\' id \';\' \'Lexer\' id \'=\' re1 \'-\' re2"
	redef fun error_msg do return "re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s115(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s115(parser)
	end
end
# State 116 'Grammar' id ';' 'Lexer' id '=' re1 'Except' re2
private class LRState116
	super LRState
	redef fun to_s do return "116 \'Grammar\' id \';\' \'Lexer\' id \'=\' re1 \'Except\' re2"
	redef fun error_msg do return "re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s116(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s116(parser)
	end
end
# State 117 'Grammar' id ';' 'Lexer' id '=' re1 'And' re2
private class LRState117
	super LRState
	redef fun to_s do return "117 \'Grammar\' id \';\' \'Lexer\' id \'=\' re1 \'And\' re2"
	redef fun error_msg do return "re3, text"
	redef fun action(parser) do
		parser.peek_token.action_s117(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s117(parser)
	end
end
# State 118 'Grammar' id ';' 'Lexer' id '=' 'Shortest' '(' re
private class LRState118
	super LRState
	redef fun to_s do return "118 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Shortest\' \'(\' re"
	redef fun error_msg do return "\')\', \'|\'"
	redef fun action(parser) do
		parser.peek_token.action_s118(parser)
	end
end
# State 119 'Grammar' id ';' 'Lexer' id '=' 'Longest' '(' re
private class LRState119
	super LRState
	redef fun to_s do return "119 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Longest\' \'(\' re"
	redef fun error_msg do return "\')\', \'|\'"
	redef fun action(parser) do
		parser.peek_token.action_s119(parser)
	end
end
# State 120 'Grammar' id ';' 'Lexer' id '=' 'Prefixes' '(' re
private class LRState120
	super LRState
	redef fun to_s do return "120 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Prefixes\' \'(\' re"
	redef fun error_msg do return "\')\', \'|\'"
	redef fun action(parser) do
		parser.peek_token.action_s120(parser)
	end
end
# State 121 'Grammar' id ';' 'Lexer' id '=' '(' re ')'
private class LRState121
	super LRState
	redef fun to_s do return "121 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'(\' re \')\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_par(parser)
	end
end
# State 122 'Grammar' id ';' 'Lexer' id '=' text '.' '.'
private class LRState122
	super LRState
	redef fun to_s do return "122 \'Grammar\' id \';\' \'Lexer\' id \'=\' text \'.\' \'.\'"
	redef fun error_msg do return "text"
	redef fun action(parser) do
		parser.peek_token.action_s122(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_141)
	end
end
# State 123 'Grammar' id ';' 'Parser' id ptrans '=' alts priority+
private class LRState123
	super LRState
	redef fun to_s do return "123 \'Grammar\' id \';\' \'Parser\' id ptrans \'=\' alts priority+"
	redef fun error_msg do return "priority"
	redef fun action(parser) do
		parser.peek_token.action_s123(parser)
	end
	redef fun goto(parser, goto) do
		parser.push(state_126)
	end
end
# State 124 'Grammar' id ';' 'Parser' id ptrans '=' alts ';'
private class LRState124
	super LRState
	redef fun to_s do return "124 \'Grammar\' id \';\' \'Parser\' id ptrans \'=\' alts \';\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nprod_95d2(parser)
	end
end
# State 125 'Grammar' id ';' 'Parser' id '=' alts priority+ ';'
private class LRState125
	super LRState
	redef fun to_s do return "125 \'Grammar\' id \';\' \'Parser\' id \'=\' alts priority+ \';\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nprod_95d1(parser)
	end
end
# State 126 'Grammar' id ';' 'Parser' id '=' alts priority+ priority
private class LRState126
	super LRState
	redef fun to_s do return "126 \'Grammar\' id \';\' \'Parser\' id \'=\' alts priority+ priority"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Npriority_43d_more(parser)
	end
end
# State 127 'Grammar' id ';' 'Parser' id '=' alts '|' alt
private class LRState127
	super LRState
	redef fun to_s do return "127 \'Grammar\' id \';\' \'Parser\' id \'=\' alts \'|\' alt"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nalts_more(parser)
	end
end
# State 128 'Grammar' id ';' 'Parser' id '=' alts 'Left' alts
private class LRState128
	super LRState
	redef fun to_s do return "128 \'Grammar\' id \';\' \'Parser\' id \'=\' alts \'Left\' alts"
	redef fun error_msg do return "\'|\'"
	redef fun action(parser) do
		parser.peek_token.action_s128(parser)
	end
end
# State 129 'Grammar' id ';' 'Parser' id '=' alts 'Right' alts
private class LRState129
	super LRState
	redef fun to_s do return "129 \'Grammar\' id \';\' \'Parser\' id \'=\' alts \'Right\' alts"
	redef fun error_msg do return "\'|\'"
	redef fun action(parser) do
		parser.peek_token.action_s129(parser)
	end
end
# State 130 'Grammar' id ';' 'Parser' id '=' alts 'Unary' alts
private class LRState130
	super LRState
	redef fun to_s do return "130 \'Grammar\' id \';\' \'Parser\' id \'=\' alts \'Unary\' alts"
	redef fun error_msg do return "\'|\'"
	redef fun action(parser) do
		parser.peek_token.action_s130(parser)
	end
end
# State 131 'Grammar' id ';' 'Parser' id '=' altid nelem+ atrans
private class LRState131
	super LRState
	redef fun to_s do return "131 \'Grammar\' id \';\' \'Parser\' id \'=\' altid nelem+ atrans"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nalt_95d0(parser)
	end
end
# State 132 'Grammar' id ';' 'Parser' id '=' '{' id ':'
private class LRState132
	super LRState
	redef fun to_s do return "132 \'Grammar\' id \';\' \'Parser\' id \'=\' \'\{\' id \':\'"
	redef fun error_msg do return "\'\}\'"
	redef fun action(parser) do
		parser.peek_token.action_s132(parser)
	end
end
# State 133 'Grammar' id ';' 'Parser' id '=' '{' id '}'
private class LRState133
	super LRState
	redef fun to_s do return "133 \'Grammar\' id \';\' \'Parser\' id \'=\' \'\{\' id \'\}\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Naltid_95d1(parser)
	end
end
# State 134 'Grammar' id ';' 'Parser' id '=' '{' '->' '}'
private class LRState134
	super LRState
	redef fun to_s do return "134 \'Grammar\' id \';\' \'Parser\' id \'=\' \'\{\' \'->\' \'\}\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Natrans(parser)
	end
end
# State 135 'Grammar' id ';' 'Parser' id '=' '[' id ':'
private class LRState135
	super LRState
	redef fun to_s do return "135 \'Grammar\' id \';\' \'Parser\' id \'=\' \'[\' id \':\'"
	redef fun error_msg do return "\']\'"
	redef fun action(parser) do
		parser.peek_token.action_s135(parser)
	end
end
# State 136 'Grammar' id ';' 'Parser' id '=' '[' id ']'
private class LRState136
	super LRState
	redef fun to_s do return "136 \'Grammar\' id \';\' \'Parser\' id \'=\' \'[\' id \']\'"
	redef fun error_msg do return "\':\'"
	redef fun action(parser) do
		parser.peek_token.action_s136(parser)
	end
end
# State 137 'Grammar' id ';' 'Parser' id '{' '->' id '}'
private class LRState137
	super LRState
	redef fun to_s do return "137 \'Grammar\' id \';\' \'Parser\' id \'\{\' \'->\' id \'\}\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nptrans(parser)
	end
end
# State 138 'Grammar' id ';' 'Lexer' id '=' 'Shortest' '(' re ')'
private class LRState138
	super LRState
	redef fun to_s do return "138 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Shortest\' \'(\' re \')\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_shortest(parser)
	end
end
# State 139 'Grammar' id ';' 'Lexer' id '=' 'Longest' '(' re ')'
private class LRState139
	super LRState
	redef fun to_s do return "139 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Longest\' \'(\' re \')\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_longest(parser)
	end
end
# State 140 'Grammar' id ';' 'Lexer' id '=' 'Prefixes' '(' re ')'
private class LRState140
	super LRState
	redef fun to_s do return "140 \'Grammar\' id \';\' \'Lexer\' id \'=\' \'Prefixes\' \'(\' re \')\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_prefixes(parser)
	end
end
# State 141 'Grammar' id ';' 'Lexer' id '=' text '.' '.' text
private class LRState141
	super LRState
	redef fun to_s do return "141 \'Grammar\' id \';\' \'Lexer\' id \'=\' text \'.\' \'.\' text"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_class(parser)
	end
end
# State 142 'Grammar' id ';' 'Lexer' id '=' text '.' '.' '.'
private class LRState142
	super LRState
	redef fun to_s do return "142 \'Grammar\' id \';\' \'Lexer\' id \'=\' text \'.\' \'.\' \'.\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_openclass(parser)
	end
end
# State 143 'Grammar' id ';' 'Parser' id ptrans '=' alts priority+ ';'
private class LRState143
	super LRState
	redef fun to_s do return "143 \'Grammar\' id \';\' \'Parser\' id ptrans \'=\' alts priority+ \';\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nprod_95d0(parser)
	end
end
# State 144 'Grammar' id ';' 'Parser' id '=' '{' id ':' '}'
private class LRState144
	super LRState
	redef fun to_s do return "144 \'Grammar\' id \';\' \'Parser\' id \'=\' \'\{\' id \':\' \'\}\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Naltid_95d0(parser)
	end
end
# State 145 'Grammar' id ';' 'Parser' id '=' '[' id ':' ']'
private class LRState145
	super LRState
	redef fun to_s do return "145 \'Grammar\' id \';\' \'Parser\' id \'=\' \'[\' id \':\' \']\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nelemid_95d0(parser)
	end
end
# State 146 'Grammar' id ';' 'Parser' id '=' '[' id ']' ':'
private class LRState146
	super LRState
	redef fun to_s do return "146 \'Grammar\' id \';\' \'Parser\' id \'=\' \'[\' id \']\' \':\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nelemid_95d1(parser)
	end
end
