# This file is part of NIT ( http://www.nitlanguage.org ).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Parser generated by nitcc for the grammar nitcc
module nitcc_nodes is generated, no_warning("missing-doc","old-init")
import nitcc_runtime
class Nunknown_keyword
	super NToken
	redef fun node_name do return "unknown_keyword"
end
class N_39dGrammar_39d
	super NToken
	redef fun node_name do return "\'Grammar\'"
end
class Nid
	super NToken
	redef fun node_name do return "id"
end
class N_39d_59d_39d
	super NToken
	redef fun node_name do return "\';\'"
end
class N_39dLexer_39d
	super NToken
	redef fun node_name do return "\'Lexer\'"
end
class N_39d_61d_39d
	super NToken
	redef fun node_name do return "\'=\'"
end
class N_39d_124d_39d
	super NToken
	redef fun node_name do return "\'|\'"
end
class N_39d_45d_39d
	super NToken
	redef fun node_name do return "\'-\'"
end
class N_39dExcept_39d
	super NToken
	redef fun node_name do return "\'Except\'"
end
class N_39dAnd_39d
	super NToken
	redef fun node_name do return "\'And\'"
end
class N_39d_63d_39d
	super NToken
	redef fun node_name do return "\'?\'"
end
class N_39d_42d_39d
	super NToken
	redef fun node_name do return "\'*\'"
end
class N_39d_43d_39d
	super NToken
	redef fun node_name do return "\'+\'"
end
class N_39dShortest_39d
	super NToken
	redef fun node_name do return "\'Shortest\'"
end
class N_39d_40d_39d
	super NToken
	redef fun node_name do return "\'(\'"
end
class N_39d_41d_39d
	super NToken
	redef fun node_name do return "\')\'"
end
class N_39dLongest_39d
	super NToken
	redef fun node_name do return "\'Longest\'"
end
class N_39dPrefixes_39d
	super NToken
	redef fun node_name do return "\'Prefixes\'"
end
class N_39d_46d_39d
	super NToken
	redef fun node_name do return "\'.\'"
end
class N_39dAny_39d
	super NToken
	redef fun node_name do return "\'Any\'"
end
class N_39dEnd_39d
	super NToken
	redef fun node_name do return "\'End\'"
end
class Nstr
	super NToken
	redef fun node_name do return "str"
end
class Nch_dec
	super NToken
	redef fun node_name do return "ch_dec"
end
class Nch_hex
	super NToken
	redef fun node_name do return "ch_hex"
end
class N_39dParser_39d
	super NToken
	redef fun node_name do return "\'Parser\'"
end
class N_39dIgnored_39d
	super NToken
	redef fun node_name do return "\'Ignored\'"
end
class N_39dRejected_39d
	super NToken
	redef fun node_name do return "\'Rejected\'"
end
class N_39d_123d_39d
	super NToken
	redef fun node_name do return "\'\{\'"
end
class N_39d_45d_62d_39d
	super NToken
	redef fun node_name do return "\'->\'"
end
class N_39d_125d_39d
	super NToken
	redef fun node_name do return "\'\}\'"
end
class N_39d_58d_39d
	super NToken
	redef fun node_name do return "\':\'"
end
class N_39d_91d_39d
	super NToken
	redef fun node_name do return "\'[\'"
end
class N_39d_93d_39d
	super NToken
	redef fun node_name do return "\']\'"
end
class N_39d_44d_39d
	super NToken
	redef fun node_name do return "\',\'"
end
class N_39dEmpty_39d
	super NToken
	redef fun node_name do return "\'Empty\'"
end
class N_39dLeft_39d
	super NToken
	redef fun node_name do return "\'Left\'"
end
class N_39dRight_39d
	super NToken
	redef fun node_name do return "\'Right\'"
end
class N_39dUnary_39d
	super NToken
	redef fun node_name do return "\'Unary\'"
end
class N_39dTree_39d
	super NToken
	redef fun node_name do return "\'Tree\'"
end
redef class NEof
	redef fun node_name do return "Eof"
end
class Ngrammar
	super NProd
	redef fun node_name do return "grammar"
	var n_0: N_39dGrammar_39d
	var n_id: Nid
	var n_2: N_39d_59d_39d
	var n_lexer_part: nullable Nlexer_part
	var n_parser_part: nullable Nparser_part
	var n_tree_part: nullable Ntree_part
	init(n_0: N_39dGrammar_39d, n_id: Nid, n_2: N_39d_59d_39d, n_lexer_part: nullable Nlexer_part, n_parser_part: nullable Nparser_part, n_tree_part: nullable Ntree_part) do
		self.n_0 = n_0
		self.n_id = n_id
		self.n_2 = n_2
		self.n_lexer_part = n_lexer_part
		self.n_parser_part = n_parser_part
		self.n_tree_part = n_tree_part
	end
	redef fun number_of_children do return 6
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_id
		if i == 2 then return n_2
		if i == 3 then return n_lexer_part
		if i == 4 then return n_parser_part
		if i == 5 then return n_tree_part
		abort
	end
end
class Nlexer_part
	super NProd
	redef fun node_name do return "lexer_part"
	var n_0: N_39dLexer_39d
	var n_expr: nullable Nodes[Nexpr]
	init(n_0: N_39dLexer_39d, n_expr: nullable Nodes[Nexpr]) do
		self.n_0 = n_0
		self.n_expr = n_expr
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_expr
		abort
	end
end
class Nexpr
	super NProd
	redef fun node_name do return "expr"
	var n_id: Nid
	var n_1: N_39d_61d_39d
	var n_re: Nre
	var n_3: N_39d_59d_39d
	init(n_id: Nid, n_1: N_39d_61d_39d, n_re: Nre, n_3: N_39d_59d_39d) do
		self.n_id = n_id
		self.n_1 = n_1
		self.n_re = n_re
		self.n_3 = n_3
	end
	redef fun number_of_children do return 4
	redef fun child(i) do
		if i == 0 then return n_id
		if i == 1 then return n_1
		if i == 2 then return n_re
		if i == 3 then return n_3
		abort
	end
end
class Nre
	super NProd
	redef fun node_name do return "re"
end
class Nre_alter
	super Nre
	redef fun node_name do return "re_alter"
	var n_re: Nre
	var n_1: N_39d_124d_39d
	var n_re1: Nre
	init(n_re: Nre, n_1: N_39d_124d_39d, n_re1: Nre) do
		self.n_re = n_re
		self.n_1 = n_1
		self.n_re1 = n_re1
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_re
		if i == 1 then return n_1
		if i == 2 then return n_re1
		abort
	end
end
class Nre_95d1
	super Nre
	redef fun node_name do return "re_1"
	var n_re1: Nre
	init(n_re1: Nre) do
		self.n_re1 = n_re1
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_re1
		abort
	end
end
class Nre_minus
	super Nre
	redef fun node_name do return "re_minus"
	var n_re1: Nre
	var n_1: N_39d_45d_39d
	var n_re2: Nre
	init(n_re1: Nre, n_1: N_39d_45d_39d, n_re2: Nre) do
		self.n_re1 = n_re1
		self.n_1 = n_1
		self.n_re2 = n_re2
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_re1
		if i == 1 then return n_1
		if i == 2 then return n_re2
		abort
	end
end
class Nre_except
	super Nre
	redef fun node_name do return "re_except"
	var n_re1: Nre
	var n_1: N_39dExcept_39d
	var n_re2: Nre
	init(n_re1: Nre, n_1: N_39dExcept_39d, n_re2: Nre) do
		self.n_re1 = n_re1
		self.n_1 = n_1
		self.n_re2 = n_re2
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_re1
		if i == 1 then return n_1
		if i == 2 then return n_re2
		abort
	end
end
class Nre_and
	super Nre
	redef fun node_name do return "re_and"
	var n_re1: Nre
	var n_1: N_39dAnd_39d
	var n_re2: Nre
	init(n_re1: Nre, n_1: N_39dAnd_39d, n_re2: Nre) do
		self.n_re1 = n_re1
		self.n_1 = n_1
		self.n_re2 = n_re2
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_re1
		if i == 1 then return n_1
		if i == 2 then return n_re2
		abort
	end
end
class Nre1_95d3
	super Nre
	redef fun node_name do return "re1_3"
	var n_re2: Nre
	init(n_re2: Nre) do
		self.n_re2 = n_re2
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_re2
		abort
	end
end
class Nre_conc
	super Nre
	redef fun node_name do return "re_conc"
	var n_re2: Nre
	var n_re3: Nre
	init(n_re2: Nre, n_re3: Nre) do
		self.n_re2 = n_re2
		self.n_re3 = n_re3
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_re2
		if i == 1 then return n_re3
		abort
	end
end
class Nre2_95d1
	super Nre
	redef fun node_name do return "re2_1"
	var n_re3: Nre
	init(n_re3: Nre) do
		self.n_re3 = n_re3
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_re3
		abort
	end
end
class Nre_ques
	super Nre
	redef fun node_name do return "re_ques"
	var n_re3: Nre
	var n_1: N_39d_63d_39d
	init(n_re3: Nre, n_1: N_39d_63d_39d) do
		self.n_re3 = n_re3
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_re3
		if i == 1 then return n_1
		abort
	end
end
class Nre_star
	super Nre
	redef fun node_name do return "re_star"
	var n_re3: Nre
	var n_1: N_39d_42d_39d
	init(n_re3: Nre, n_1: N_39d_42d_39d) do
		self.n_re3 = n_re3
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_re3
		if i == 1 then return n_1
		abort
	end
end
class Nre_plus
	super Nre
	redef fun node_name do return "re_plus"
	var n_re3: Nre
	var n_1: N_39d_43d_39d
	init(n_re3: Nre, n_1: N_39d_43d_39d) do
		self.n_re3 = n_re3
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_re3
		if i == 1 then return n_1
		abort
	end
end
class Nre_shortest
	super Nre
	redef fun node_name do return "re_shortest"
	var n_0: N_39dShortest_39d
	var n_1: N_39d_40d_39d
	var n_re: Nre
	var n_3: N_39d_41d_39d
	init(n_0: N_39dShortest_39d, n_1: N_39d_40d_39d, n_re: Nre, n_3: N_39d_41d_39d) do
		self.n_0 = n_0
		self.n_1 = n_1
		self.n_re = n_re
		self.n_3 = n_3
	end
	redef fun number_of_children do return 4
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_1
		if i == 2 then return n_re
		if i == 3 then return n_3
		abort
	end
end
class Nre_longest
	super Nre
	redef fun node_name do return "re_longest"
	var n_0: N_39dLongest_39d
	var n_1: N_39d_40d_39d
	var n_re: Nre
	var n_3: N_39d_41d_39d
	init(n_0: N_39dLongest_39d, n_1: N_39d_40d_39d, n_re: Nre, n_3: N_39d_41d_39d) do
		self.n_0 = n_0
		self.n_1 = n_1
		self.n_re = n_re
		self.n_3 = n_3
	end
	redef fun number_of_children do return 4
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_1
		if i == 2 then return n_re
		if i == 3 then return n_3
		abort
	end
end
class Nre_prefixes
	super Nre
	redef fun node_name do return "re_prefixes"
	var n_0: N_39dPrefixes_39d
	var n_1: N_39d_40d_39d
	var n_re: Nre
	var n_3: N_39d_41d_39d
	init(n_0: N_39dPrefixes_39d, n_1: N_39d_40d_39d, n_re: Nre, n_3: N_39d_41d_39d) do
		self.n_0 = n_0
		self.n_1 = n_1
		self.n_re = n_re
		self.n_3 = n_3
	end
	redef fun number_of_children do return 4
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_1
		if i == 2 then return n_re
		if i == 3 then return n_3
		abort
	end
end
class Nre_id
	super Nre
	redef fun node_name do return "re_id"
	var n_id: Nid
	init(n_id: Nid) do
		self.n_id = n_id
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_id
		abort
	end
end
class Nre_par
	super Nre
	redef fun node_name do return "re_par"
	var n_0: N_39d_40d_39d
	var n_re: Nre
	var n_2: N_39d_41d_39d
	init(n_0: N_39d_40d_39d, n_re: Nre, n_2: N_39d_41d_39d) do
		self.n_0 = n_0
		self.n_re = n_re
		self.n_2 = n_2
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_re
		if i == 2 then return n_2
		abort
	end
end
class Nre_class
	super Nre
	redef fun node_name do return "re_class"
	var n_text: Nre
	var n_1: N_39d_46d_39d
	var n_2: N_39d_46d_39d
	var n_text2: Nre
	init(n_text: Nre, n_1: N_39d_46d_39d, n_2: N_39d_46d_39d, n_text2: Nre) do
		self.n_text = n_text
		self.n_1 = n_1
		self.n_2 = n_2
		self.n_text2 = n_text2
	end
	redef fun number_of_children do return 4
	redef fun child(i) do
		if i == 0 then return n_text
		if i == 1 then return n_1
		if i == 2 then return n_2
		if i == 3 then return n_text2
		abort
	end
end
class Nre_openclass
	super Nre
	redef fun node_name do return "re_openclass"
	var n_text: Nre
	var n_1: N_39d_46d_39d
	var n_2: N_39d_46d_39d
	var n_3: N_39d_46d_39d
	init(n_text: Nre, n_1: N_39d_46d_39d, n_2: N_39d_46d_39d, n_3: N_39d_46d_39d) do
		self.n_text = n_text
		self.n_1 = n_1
		self.n_2 = n_2
		self.n_3 = n_3
	end
	redef fun number_of_children do return 4
	redef fun child(i) do
		if i == 0 then return n_text
		if i == 1 then return n_1
		if i == 2 then return n_2
		if i == 3 then return n_3
		abort
	end
end
class Nre_any
	super Nre
	redef fun node_name do return "re_any"
	var n_0: N_39dAny_39d
	init(n_0: N_39dAny_39d) do
		self.n_0 = n_0
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_0
		abort
	end
end
class Nre_end
	super Nre
	redef fun node_name do return "re_end"
	var n_0: N_39dEnd_39d
	init(n_0: N_39dEnd_39d) do
		self.n_0 = n_0
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_0
		abort
	end
end
class Nre_text
	super Nre
	redef fun node_name do return "re_text"
	var n_text: Nre
	init(n_text: Nre) do
		self.n_text = n_text
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_text
		abort
	end
end
class Nre_str
	super Nre
	redef fun node_name do return "re_str"
	var n_str: Nstr
	init(n_str: Nstr) do
		self.n_str = n_str
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_str
		abort
	end
end
class Nre_ch_dec
	super Nre
	redef fun node_name do return "re_ch_dec"
	var n_ch_dec: Nch_dec
	init(n_ch_dec: Nch_dec) do
		self.n_ch_dec = n_ch_dec
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_ch_dec
		abort
	end
end
class Nre_ch_hex
	super Nre
	redef fun node_name do return "re_ch_hex"
	var n_ch_hex: Nch_hex
	init(n_ch_hex: Nch_hex) do
		self.n_ch_hex = n_ch_hex
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_ch_hex
		abort
	end
end
class Nparser_part
	super NProd
	redef fun node_name do return "parser_part"
	var n_0: N_39dParser_39d
	var n_ign: nullable Nign
	var n_rej: nullable Nrej
	var n_prod: nullable Nodes[Nprod]
	init(n_0: N_39dParser_39d, n_ign: nullable Nign, n_rej: nullable Nrej, n_prod: nullable Nodes[Nprod]) do
		self.n_0 = n_0
		self.n_ign = n_ign
		self.n_rej = n_rej
		self.n_prod = n_prod
	end
	redef fun number_of_children do return 4
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_ign
		if i == 2 then return n_rej
		if i == 3 then return n_prod
		abort
	end
end
class Nign
	super NProd
	redef fun node_name do return "ign"
	var n_0: N_39dIgnored_39d
	var n_elem_list: Nelem_list
	var n_2: N_39d_59d_39d
	init(n_0: N_39dIgnored_39d, n_elem_list: Nelem_list, n_2: N_39d_59d_39d) do
		self.n_0 = n_0
		self.n_elem_list = n_elem_list
		self.n_2 = n_2
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_elem_list
		if i == 2 then return n_2
		abort
	end
end
class Nrej
	super NProd
	redef fun node_name do return "rej"
	var n_0: N_39dRejected_39d
	var n_elem_list: Nelem_list
	var n_2: N_39d_59d_39d
	init(n_0: N_39dRejected_39d, n_elem_list: Nelem_list, n_2: N_39d_59d_39d) do
		self.n_0 = n_0
		self.n_elem_list = n_elem_list
		self.n_2 = n_2
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_elem_list
		if i == 2 then return n_2
		abort
	end
end
class Nprod
	super NProd
	redef fun node_name do return "prod"
	var n_id: Nid
	var n_ptrans: nullable Nptrans
	var n_2: N_39d_61d_39d
	var n_alts: Nalts
	var n_priority: nullable Nodes[Npriority]
	var n_5: N_39d_59d_39d
	init(n_id: Nid, n_ptrans: nullable Nptrans, n_2: N_39d_61d_39d, n_alts: Nalts, n_priority: nullable Nodes[Npriority], n_5: N_39d_59d_39d) do
		self.n_id = n_id
		self.n_ptrans = n_ptrans
		self.n_2 = n_2
		self.n_alts = n_alts
		self.n_priority = n_priority
		self.n_5 = n_5
	end
	redef fun number_of_children do return 6
	redef fun child(i) do
		if i == 0 then return n_id
		if i == 1 then return n_ptrans
		if i == 2 then return n_2
		if i == 3 then return n_alts
		if i == 4 then return n_priority
		if i == 5 then return n_5
		abort
	end
end
class Nptrans
	super NProd
	redef fun node_name do return "ptrans"
	var n_0: N_39d_123d_39d
	var n_1: N_39d_45d_62d_39d
	var n_id: Nid
	var n_3: N_39d_125d_39d
	init(n_0: N_39d_123d_39d, n_1: N_39d_45d_62d_39d, n_id: Nid, n_3: N_39d_125d_39d) do
		self.n_0 = n_0
		self.n_1 = n_1
		self.n_id = n_id
		self.n_3 = n_3
	end
	redef fun number_of_children do return 4
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_1
		if i == 2 then return n_id
		if i == 3 then return n_3
		abort
	end
end
class Natrans
	super NProd
	redef fun node_name do return "atrans"
	var n_0: N_39d_123d_39d
	var n_1: N_39d_45d_62d_39d
	var n_2: N_39d_125d_39d
	init(n_0: N_39d_123d_39d, n_1: N_39d_45d_62d_39d, n_2: N_39d_125d_39d) do
		self.n_0 = n_0
		self.n_1 = n_1
		self.n_2 = n_2
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_1
		if i == 2 then return n_2
		abort
	end
end
class Nalts
	super NProd
	redef fun node_name do return "alts"
end
class Nalts_more
	super Nalts
	redef fun node_name do return "alts_more"
	var n_alts: Nalts
	var n_1: N_39d_124d_39d
	var n_alt: Nalt
	init(n_alts: Nalts, n_1: N_39d_124d_39d, n_alt: Nalt) do
		self.n_alts = n_alts
		self.n_1 = n_1
		self.n_alt = n_alt
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_alts
		if i == 1 then return n_1
		if i == 2 then return n_alt
		abort
	end
end
class Nalts_one
	super Nalts
	redef fun node_name do return "alts_one"
	var n_alt: Nalt
	init(n_alt: Nalt) do
		self.n_alt = n_alt
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_alt
		abort
	end
end
class Nalt
	super NProd
	redef fun node_name do return "alt"
	var n_altid: nullable Naltid
	var n_nelem: nullable Nodes[Nnelem]
	var n_atrans: nullable Natrans
	init(n_altid: nullable Naltid, n_nelem: nullable Nodes[Nnelem], n_atrans: nullable Natrans) do
		self.n_altid = n_altid
		self.n_nelem = n_nelem
		self.n_atrans = n_atrans
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_altid
		if i == 1 then return n_nelem
		if i == 2 then return n_atrans
		abort
	end
end
class Naltid
	super NProd
	redef fun node_name do return "altid"
end
class Naltid_95d0
	super Naltid
	redef fun node_name do return "altid_0"
	var n_0: N_39d_123d_39d
	var n_id: Nid
	var n_2: N_39d_58d_39d
	var n_3: N_39d_125d_39d
	init(n_0: N_39d_123d_39d, n_id: Nid, n_2: N_39d_58d_39d, n_3: N_39d_125d_39d) do
		self.n_0 = n_0
		self.n_id = n_id
		self.n_2 = n_2
		self.n_3 = n_3
	end
	redef fun number_of_children do return 4
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_id
		if i == 2 then return n_2
		if i == 3 then return n_3
		abort
	end
end
class Naltid_95d1
	super Naltid
	redef fun node_name do return "altid_1"
	var n_0: N_39d_123d_39d
	var n_id: Nid
	var n_2: N_39d_125d_39d
	init(n_0: N_39d_123d_39d, n_id: Nid, n_2: N_39d_125d_39d) do
		self.n_0 = n_0
		self.n_id = n_id
		self.n_2 = n_2
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_id
		if i == 2 then return n_2
		abort
	end
end
class Nnelem
	super NProd
	redef fun node_name do return "nelem"
end
class Nnelem_95d0
	super Nnelem
	redef fun node_name do return "nelem_0"
	var n_elem: Nelem
	init(n_elem: Nelem) do
		self.n_elem = n_elem
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_elem
		abort
	end
end
class Nnelem_95d1
	super Nnelem
	redef fun node_name do return "nelem_1"
	var n_elemid: Nelemid
	var n_elem: Nelem
	init(n_elemid: Nelemid, n_elem: Nelem) do
		self.n_elemid = n_elemid
		self.n_elem = n_elem
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_elemid
		if i == 1 then return n_elem
		abort
	end
end
class Nelemid
	super NProd
	redef fun node_name do return "elemid"
end
class Nelemid_95d0
	super Nelemid
	redef fun node_name do return "elemid_0"
	var n_0: N_39d_91d_39d
	var n_id: Nid
	var n_2: N_39d_58d_39d
	var n_3: N_39d_93d_39d
	init(n_0: N_39d_91d_39d, n_id: Nid, n_2: N_39d_58d_39d, n_3: N_39d_93d_39d) do
		self.n_0 = n_0
		self.n_id = n_id
		self.n_2 = n_2
		self.n_3 = n_3
	end
	redef fun number_of_children do return 4
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_id
		if i == 2 then return n_2
		if i == 3 then return n_3
		abort
	end
end
class Nelemid_95d1
	super Nelemid
	redef fun node_name do return "elemid_1"
	var n_0: N_39d_91d_39d
	var n_id: Nid
	var n_2: N_39d_93d_39d
	var n_3: N_39d_58d_39d
	init(n_0: N_39d_91d_39d, n_id: Nid, n_2: N_39d_93d_39d, n_3: N_39d_58d_39d) do
		self.n_0 = n_0
		self.n_id = n_id
		self.n_2 = n_2
		self.n_3 = n_3
	end
	redef fun number_of_children do return 4
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_id
		if i == 2 then return n_2
		if i == 3 then return n_3
		abort
	end
end
class Nelem_list
	super NProd
	redef fun node_name do return "elem_list"
end
class Nelem_list_more
	super Nelem_list
	redef fun node_name do return "elem_list_more"
	var n_elem_list: Nelem_list
	var n_1: N_39d_44d_39d
	var n_elem: Nelem
	init(n_elem_list: Nelem_list, n_1: N_39d_44d_39d, n_elem: Nelem) do
		self.n_elem_list = n_elem_list
		self.n_1 = n_1
		self.n_elem = n_elem
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_elem_list
		if i == 1 then return n_1
		if i == 2 then return n_elem
		abort
	end
end
class Nelem_list_one
	super Nelem_list
	redef fun node_name do return "elem_list_one"
	var n_elem: Nelem
	init(n_elem: Nelem) do
		self.n_elem = n_elem
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_elem
		abort
	end
end
class Nelem
	super NProd
	redef fun node_name do return "elem"
end
class Nelem_id
	super Nelem
	redef fun node_name do return "elem_id"
	var n_id: Nid
	init(n_id: Nid) do
		self.n_id = n_id
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_id
		abort
	end
end
class Nelem_str
	super Nelem
	redef fun node_name do return "elem_str"
	var n_text: Nre
	init(n_text: Nre) do
		self.n_text = n_text
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_text
		abort
	end
end
class Nelem_star
	super Nelem
	redef fun node_name do return "elem_star"
	var n_elem: Nelem
	var n_1: N_39d_42d_39d
	init(n_elem: Nelem, n_1: N_39d_42d_39d) do
		self.n_elem = n_elem
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_elem
		if i == 1 then return n_1
		abort
	end
end
class Nelem_ques
	super Nelem
	redef fun node_name do return "elem_ques"
	var n_elem: Nelem
	var n_1: N_39d_63d_39d
	init(n_elem: Nelem, n_1: N_39d_63d_39d) do
		self.n_elem = n_elem
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_elem
		if i == 1 then return n_1
		abort
	end
end
class Nelem_plus
	super Nelem
	redef fun node_name do return "elem_plus"
	var n_elem: Nelem
	var n_1: N_39d_43d_39d
	init(n_elem: Nelem, n_1: N_39d_43d_39d) do
		self.n_elem = n_elem
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_elem
		if i == 1 then return n_1
		abort
	end
end
class Nelem_par
	super Nelem
	redef fun node_name do return "elem_par"
	var n_0: N_39d_40d_39d
	var n_elem: Nodes[Nelem]
	var n_2: N_39d_41d_39d
	init(n_0: N_39d_40d_39d, n_elem: Nodes[Nelem], n_2: N_39d_41d_39d) do
		self.n_0 = n_0
		self.n_elem = n_elem
		self.n_2 = n_2
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_elem
		if i == 2 then return n_2
		abort
	end
end
class Nelem_empty
	super Nelem
	redef fun node_name do return "elem_empty"
	var n_0: N_39dEmpty_39d
	init(n_0: N_39dEmpty_39d) do
		self.n_0 = n_0
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_0
		abort
	end
end
class Npriority
	super NProd
	redef fun node_name do return "priority"
end
class Npriority_left
	super Npriority
	redef fun node_name do return "priority_left"
	var n_0: N_39dLeft_39d
	var n_alts: Nalts
	init(n_0: N_39dLeft_39d, n_alts: Nalts) do
		self.n_0 = n_0
		self.n_alts = n_alts
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_alts
		abort
	end
end
class Npriority_right
	super Npriority
	redef fun node_name do return "priority_right"
	var n_0: N_39dRight_39d
	var n_alts: Nalts
	init(n_0: N_39dRight_39d, n_alts: Nalts) do
		self.n_0 = n_0
		self.n_alts = n_alts
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_alts
		abort
	end
end
class Npriority_unary
	super Npriority
	redef fun node_name do return "priority_unary"
	var n_0: N_39dUnary_39d
	var n_alts: Nalts
	init(n_0: N_39dUnary_39d, n_alts: Nalts) do
		self.n_0 = n_0
		self.n_alts = n_alts
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_alts
		abort
	end
end
class Ntree_part
	super NProd
	redef fun node_name do return "tree_part"
	var n_0: N_39dTree_39d
	var n_prod: nullable Nodes[Nprod]
	init(n_0: N_39dTree_39d, n_prod: nullable Nodes[Nprod]) do
		self.n_0 = n_0
		self.n_prod = n_prod
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_prod
		abort
	end
end
class N_start
	super NProd
	redef fun node_name do return "_start"
end
class NStart
	super N_start
	redef fun node_name do return "Start"
	var n_0: Ngrammar
	var n_1: NEof
	init(n_0: Ngrammar, n_1: NEof) do
		self.n_0 = n_0
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_1
		abort
	end
end
